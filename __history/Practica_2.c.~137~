
//#fuses intrc, nowdt

#include <18f4550.h>
#include <string.h>
#fuses xt,nowdt
#use delay(internal = 8M)
#define LCD_DATA_PORT getenv("SFR:PORTD")   
#include <lcd.c>

#byte TRISB=0xF93
#byte PORTB=0xF81

#define MAX_LONGITUD 5

//!char cadena1[] = {'S','I','S','T','E','M','A',' ','L','I','S','T','O','\0'};
//!char cadena2[] = {'C','L','A','V','E',' ','I','N','C','O','R','R','E','C','T','A','\0'};
//!char cadena3[] = {'B','I','E','N','V','E','N','I','D','O','!','\0'};
//!char cadena4[] = {'C','E','R','R','A','N','D','O',' ','P','.','\0'};
//!char cadena5[] = {'N','.',' ','C','L','A','V','E','\0'};
//!char cadena6[] = {'C','.',' ','C','L','A','V','E','\0'};
//!char cadena7[] = {'G','.',' ','C','L','A','V','E','\0'};
//!char cadena8[] = {'P','U','E','R','T','A',' ','C','E','R','R','A','D','A','\0'};
//!char cadena9[] = {'C','L','A','V','E',' ','A','C','T','U','A','L','\0'};

char *matriz_mensages_simples[] = {
        "SISTEMA LISTO",
        "CLAVE INCORRECTA",
        "BIENVENIDO!",
        "CERRANDO P.",
        "N. CLAVE",
        "C. CLAVE",
        "G. CLAVE",
        "PUERTA CERRADA",
        "CLAVE ACTUAL"
    };
    
char *matriz_mensages_dobles[] = {
     "SISTEMA", "LISTO"
   };

void cargando(char cadena[]);
void mensage_info(char cadena[], int pos_x, int pos_y);
void acceder(char clave[], char cadena[]);
char com_tecla();
void esperar(int tiempo);
void acceso_permitido(char cadena[]);
void inicializar(char cadena[], int longitud, char valor);
int cambiar_clave();
void obtener_nueva_clave(char clave[], char mensaje[]);
void imprimir_cadena(char cadena[]);

char clave[MAX_LONGITUD] = {'1','2','3','4','\0'};

void main()
{
   int intentos_ingresar = 0;
   char clave_ingresada[MAX_LONGITUD];
   
   cargando(matriz_cadenas_dobles[0]);
   inicializar(clave_ingresada, MAX_LONGITUD, '\0');
   
   while(TRUE)
   {
      acceder(clave_ingresada, matriz_cadenas_simple[7]);
      if(!strcmp(clave, clave_ingresada))
      {
         lcd_putc("\f"); 
         mensage_info(matriz_cadenas_simple[2], 3, 1);
         acceso_permitido(matriz_cadenas_simple[3]);
         intentos_ingresar = 0;
      }else
      {
         mensage_info(matriz_cadenas_simple[1], 1, 1);
         if(++intentos_ingresar == 2)
         {
            esperar(20);
            intentos_ingresar = 0;
         }
      }
      lcd_putc("\f");
   }   
}

int cambiar_clave()
{
   char clave_ingresada[MAX_LONGITUD];
    
   inicializar(clave_ingresada, MAX_LONGITUD, '\0');
   
   for(int intentos_autenticar = 0; intentos_autenticar < 2; intentos_autenticar++)
   {
      acceder(clave_ingresada, matriz_cadenas_simple[8]);
   
      if(!strcmp(clave, clave_ingresada))
      {
         char clave_verificar[MAX_LONGITUD];
         for(intentos_autenticar = 0; intentos_autenticar < 2; intentos_autenticar++)
         {                        
            inicializar(clave_ingresada, MAX_LONGITUD, '\0');
            inicializar(clave_verificar, MAX_LONGITUD, '\0');
            
            obtener_nueva_clave(clave_ingresada, matriz_cadenas_simple[4]);
            obtener_nueva_clave(clave_verificar, matriz_cadenas_simple[5]);
            
            if(!strcmp(clave_ingresada, clave_verificar))
            {
               mensage_info(matriz_cadenas_simple[6], 1, 1);
               return 0;
            }else
            {
               mensage_info(matriz_cadenas_simple[1], 1, 1);
            }
         }         
      }else
      {
         mensage_info(matriz_cadenas_simple[1], 1, 1);
      }
   }
   esperar(10);
   return 1;
}

//permance mientras este dentro(puerta abierta)
void acceso_permitido(char cadena[])
{
   char tecla = 0; 
   lcd_gotoxy(2, 1);
   lcd_putc("PUERTA ABIERTA"); 
   lcd_gotoxy(1, 2);
   lcd_putc("1)CAMBIA 2)SALIR");
   do
   {
      tecla = com_tecla();
      switch(tecla)
      {
         case '1':
            cambiar_clave();
            break;
         case '2':
            mensage_info(cadena, 3, 1);
            break;
      }
   }while(tecla != '2');
}

//muestra la pantalla de inicializacion
void cargando(char cadena[])
{
   lcd_init();
   lcd_gotoxy(5,1);
   lcd_putc("INICIANDO");
   for(int i = 1; i < 17; i++)
   {
      lcd_gotoxy(i,2); 
      lcd_putc((unsigned char)255);
      delay_ms(20);
   }
   mensage_info(matriz_mensages_dobles[0], 5, 1, matriz_mensages_dobles[1], 4, 2);
}

//muestra mensages informativo en el LCD en x,y
void mensage_info(char cadena[], int pos_x, int pos_y)
{
   for(int j = 1; j < 4; j++)
   {
      lcd_putc("\f");
      lcd_gotoxy(pos_x, pos_y);
      imprimir_cadena(cadena);
      delay_ms(110);
      lcd_putc("\f");
      delay_ms(50);
   }   
}

void mensage_info(char cadena_a[], int pos_x_a, int pos_y_a, char cadena_b[], int pos_x_b, int pos_y_b)
{
   for(int j = 1; j < 4; j++)
   {
      lcd_putc("\f");
      lcd_gotoxy(pos_x_a, pos_y_a);
      imprimir_cadena(cadena_a);
      lcd_gotoxy(pos_x_b, pos_y_b);
      imprimir_cadena(cadena_b);
      delay_ms(110);
      lcd_putc("\f");
      delay_ms(50);
   }   
}


//espera la nueva clave debe tener 4 digitos para retornar la clave
void obtener_nueva_clave(char clave[], char mensaje[])
{
   lcd_gotoxy(1,1);
   imprimir_cadena(mensaje);
   int longitud = 0;
   char tecla = 0; 
   do
   {
      tecla = com_tecla();
      if(tecla == 0)
      {
         continue;
      }
      if(longitud < MAX_LONGITUD - 1)
      {
         if(tecla >= '0' && tecla <= '9')
         {
            lcd_gotoxy(11 + longitud,1);
            lcd_putc(tecla);
            clave[longitud++] = tecla;
         }       
      }
      if(tecla == 'A' && longitud > 0)
      {
         clave[longitud--] = '\0';
         lcd_putc("\b \b");
      }
   }while(tecla != 'D' || longitud != MAX_LONGITUD - 1);
   clave[MAX_LONGITUD - 1] = '\0';
   lcd_putc("\f");
}

void imprimir_cadena(char cadena[])
{
   int i = 0;
   while(cadena[i] != '\0')
   {
      lcd_putc(cadena[i]);
      i++;
   }
}

/** 
   espera a que ingrese la clave
   perimite valores de '0' a '9'
   tecla 'A' para eliminar el ultimo caracter
   tecla 'D' = OK para comprobar la clave
**/
void acceder(char clave[], char cadena[])
{
   lcd_gotoxy(2,1);
   imprimir_cadena(cadena);
   lcd_gotoxy(3,2);
   lcd_putc("CLAVE : ");
   int longitud = 0;
   char tecla = 0; 
   do
   {
      tecla = com_tecla();
      if(tecla == 0)
      {
         continue;
      }
      if(longitud < MAX_LONGITUD - 1)
      {
         if(tecla >= '0' && tecla <= '9')
         {
            lcd_putc(tecla);
            clave[longitud++] = tecla;
            clave[longitud] = '\0';
         }       
      }
      if(tecla == 'A' && longitud > 0)
      {
         clave[longitud--] = '\0';
         lcd_putc("\b \b");
      }
   }while(tecla != 'D' || longitud == 0);
   lcd_putc("\f");
}

/**
   inicializa un arreglo con el valor proporcionado
**/
void inicializar(char cadena[], int longitud, char valor)
{
   for(int a = 0; a < longitud; a++)
   {
      cadena[a] = valor;
   }
}

/**
   bloquea el sistema entre 1 & 99seg
   depende de el valor asignado
**/
void esperar(int tiempo)
{
   lcd_putc("\f"); 
   lcd_gotoxy(3,1);
   lcd_putc("INTENTE EN :"); 
   lcd_gotoxy(8,2);
   for(int i = tiempo; i > 0; i--)
   {  
      lcd_putc((char)(48 + (i/10)));
      lcd_putc((char)(48 + (i%10))); 
      delay_ms(250);
      lcd_putc("\b \b\b \b");
   }
}

/**
   retorna la tecla presiona
   si no se presiona ninguna retorna 0
**/
char com_tecla()
{
   const int FILA = 4;
   const int COLUMNA = 4;
   char const KEYS[4][4] = { 
                             {'1','2','3','A'},
                             {'4','5','6','B'},
                             {'7','8','9','C'},
                             {'*','0','#','D'}
                           };
   char tecla = 0;
   
   TRISB=0xF0;
   PORTB=0x00;
   
   for(int i = 0; i < FILA; i++)
   {
      bit_set(PORTB, i);
      for(int j = 0; j < COLUMNA; j++)
      {
         delay_ms(2);
         if(bit_test(portb,j + COLUMNA) == 1)
         {
            tecla=KEYS[i][j];          
            delay_ms(25);    
            return tecla;
         }
      }
      bit_clear(PORTB, i);
   }
   return tecla;
}
//!   for(int i = 0; i < COLUMNA; i++)
//!   {
//!      bit_set(PORTB, i + FILA);
//!      for(int j = 0; j < FILA; j++)
//!      {
//!         if(bit_test(PORTB,j) == 1)
//!         {
//!            tecla=KEYS[j][i];
//!            
//!            lcd_putc("\f");
//!            lcd_gotoxy(7,2);
//!            lcd_putc('H');
//!            
//!            
//!            delay_ms(1000); 
//!            return tecla;
//!         }
//!      }
//!      bit_clear(PORTB, i + FILA);
//!   }  
