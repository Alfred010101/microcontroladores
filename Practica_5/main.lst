CCS PCH C Compiler, Version 5.015, 5967               12-may.-24 21:30

               Filename:   C:\Users\Alfred\Documents\CCS C Projects\Practica_5\main.lst

               ROM used:   7604 bytes (23%)
                           Largest free fragment is 25164
               RAM used:   1060 (52%) at main() level
                           1143 (56%) worst case
               Stack used: 6 locations
               Stack size: 31

*
0000:  GOTO   1438
.................... #include <18f4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 00,00
0016:  DATA 00,00
0018:  DATA 00,00
001A:  DATA 00,5F
001C:  DATA 00,00
001E:  DATA 00,07
0020:  DATA 00,07
0022:  DATA 00,14
0024:  DATA 7F,14
0026:  DATA 7F,14
0028:  DATA 24,2A
002A:  DATA 7F,2A
002C:  DATA 12,23
002E:  DATA 13,08
0030:  DATA 64,62
0032:  DATA 36,49
0034:  DATA 56,20
0036:  DATA 50,00
0038:  DATA 08,07
003A:  DATA 03,00
003C:  DATA 00,1C
003E:  DATA 22,41
0040:  DATA 00,00
0042:  DATA 41,22
0044:  DATA 1C,00
0046:  DATA 2A,1C
0048:  DATA 7F,1C
004A:  DATA 2A,08
004C:  DATA 08,3E
004E:  DATA 08,08
0050:  DATA 00,80
0052:  DATA 70,30
0054:  DATA 00,08
0056:  DATA 08,08
0058:  DATA 08,08
005A:  DATA 00,00
005C:  DATA 60,60
005E:  DATA 00,20
0060:  DATA 10,08
0062:  DATA 04,02
0064:  DATA 3E,51
0066:  DATA 49,45
0068:  DATA 3E,00
006A:  DATA 42,7F
006C:  DATA 40,00
006E:  DATA 72,49
0070:  DATA 49,49
0072:  DATA 46,21
0074:  DATA 41,49
0076:  DATA 4D,33
0078:  DATA 18,14
007A:  DATA 12,7F
007C:  DATA 10,27
007E:  DATA 45,45
0080:  DATA 45,39
0082:  DATA 3C,4A
0084:  DATA 49,49
0086:  DATA 31,41
0088:  DATA 21,11
008A:  DATA 09,07
008C:  DATA 36,49
008E:  DATA 49,49
0090:  DATA 36,46
0092:  DATA 49,49
0094:  DATA 29,1E
0096:  DATA 00,00
0098:  DATA 14,00
009A:  DATA 00,00
009C:  DATA 40,34
009E:  DATA 00,00
00A0:  DATA 00,08
00A2:  DATA 14,22
00A4:  DATA 41,14
00A6:  DATA 14,14
00A8:  DATA 14,14
00AA:  DATA 00,41
00AC:  DATA 22,14
00AE:  DATA 08,02
00B0:  DATA 01,59
00B2:  DATA 09,06
00B4:  DATA 3E,41
00B6:  DATA 5D,59
00B8:  DATA 4E,7C
00BA:  DATA 12,11
00BC:  DATA 12,7C
00BE:  DATA 7F,49
00C0:  DATA 49,49
00C2:  DATA 36,3E
00C4:  DATA 41,41
00C6:  DATA 41,22
00C8:  DATA 7F,41
00CA:  DATA 41,41
00CC:  DATA 3E,7F
00CE:  DATA 49,49
00D0:  DATA 49,41
00D2:  DATA 7F,09
00D4:  DATA 09,09
00D6:  DATA 01,3E
00D8:  DATA 41,41
00DA:  DATA 51,73
00DC:  DATA 7F,08
00DE:  DATA 08,08
00E0:  DATA 7F,00
00E2:  DATA 41,7F
00E4:  DATA 41,00
00E6:  DATA 20,40
00E8:  DATA 41,3F
00EA:  DATA 01,7F
00EC:  DATA 08,14
00EE:  DATA 22,41
00F0:  DATA 7F,40
00F2:  DATA 40,40
00F4:  DATA 40,7F
00F6:  DATA 02,1C
00F8:  DATA 02,7F
00FA:  DATA 7F,04
00FC:  DATA 08,10
00FE:  DATA 7F,3E
0100:  DATA 41,41
0102:  DATA 41,3E
0104:  DATA 7F,09
0106:  DATA 09,09
0108:  DATA 06,3E
010A:  DATA 41,51
010C:  DATA 21,5E
010E:  DATA 7F,09
0110:  DATA 19,29
0112:  DATA 46,00
0114:  CLRF   FF7
0116:  ADDLW  24
0118:  MOVWF  FF6
011A:  MOVLW  01
011C:  ADDWFC FF7,F
011E:  TBLRD*+
0120:  MOVF   FF5,W
0122:  RETURN 0
0124:  DATA 26,49
0126:  DATA 49,49
0128:  DATA 32,03
012A:  DATA 01,7F
012C:  DATA 01,03
012E:  DATA 3F,40
0130:  DATA 40,40
0132:  DATA 3F,1F
0134:  DATA 20,40
0136:  DATA 20,1F
0138:  DATA 3F,40
013A:  DATA 38,40
013C:  DATA 3F,63
013E:  DATA 14,08
0140:  DATA 14,63
0142:  DATA 03,04
0144:  DATA 78,04
0146:  DATA 03,61
0148:  DATA 59,49
014A:  DATA 4D,43
014C:  DATA 00,7F
014E:  DATA 41,41
0150:  DATA 41,02
0152:  DATA 04,08
0154:  DATA 10,20
0156:  DATA 00,41
0158:  DATA 41,41
015A:  DATA 7F,04
015C:  DATA 02,01
015E:  DATA 02,04
0160:  DATA 40,40
0162:  DATA 40,40
0164:  DATA 40,00
0166:  DATA 03,07
0168:  DATA 08,00
016A:  DATA 20,54
016C:  DATA 54,78
016E:  DATA 40,7F
0170:  DATA 28,44
0172:  DATA 44,38
0174:  DATA 38,44
0176:  DATA 44,44
0178:  DATA 28,38
017A:  DATA 44,44
017C:  DATA 28,7F
017E:  DATA 38,54
0180:  DATA 54,54
0182:  DATA 18,00
0184:  DATA 08,7E
0186:  DATA 09,02
0188:  DATA 18,A4
018A:  DATA A4,9C
018C:  DATA 78,7F
018E:  DATA 08,04
0190:  DATA 04,78
0192:  DATA 00,44
0194:  DATA 7D,40
0196:  DATA 00,20
0198:  DATA 40,40
019A:  DATA 3D,00
019C:  DATA 7F,10
019E:  DATA 28,44
01A0:  DATA 00,00
01A2:  DATA 41,7F
01A4:  DATA 40,00
01A6:  DATA 7C,04
01A8:  DATA 78,04
01AA:  DATA 78,7C
01AC:  DATA 08,04
01AE:  DATA 04,78
01B0:  DATA 38,44
01B2:  DATA 44,44
01B4:  DATA 38,FC
01B6:  DATA 18,24
01B8:  DATA 24,18
01BA:  DATA 18,24
01BC:  DATA 24,18
01BE:  DATA FC,7C
01C0:  DATA 08,04
01C2:  DATA 04,08
01C4:  DATA 48,54
01C6:  DATA 54,54
01C8:  DATA 24,04
01CA:  DATA 04,3F
01CC:  DATA 44,24
01CE:  DATA 3C,40
01D0:  DATA 40,20
01D2:  DATA 7C,1C
01D4:  DATA 20,40
01D6:  DATA 20,1C
01D8:  DATA 3C,40
01DA:  DATA 30,40
01DC:  DATA 3C,44
01DE:  DATA 28,10
01E0:  DATA 28,44
01E2:  DATA 4C,90
01E4:  DATA 90,90
01E6:  DATA 7C,44
01E8:  DATA 64,54
01EA:  DATA 4C,44
01EC:  DATA 00,08
01EE:  DATA 36,41
01F0:  DATA 00,00
01F2:  DATA 00,77
01F4:  DATA 00,00
01F6:  DATA 00,41
01F8:  DATA 36,08
01FA:  DATA 00,02
01FC:  DATA 01,02
01FE:  DATA 04,02
0200:  CLRF   FF7
0202:  ADDLW  10
0204:  MOVWF  FF6
0206:  MOVLW  02
0208:  ADDWFC FF7,F
020A:  TBLRD*+
020C:  MOVF   FF5,W
020E:  RETURN 0
0210:  DATA 43,6F
0212:  DATA 6E,74
0214:  DATA 72,6F
0216:  DATA 6C,20
0218:  DATA 50,57
021A:  DATA 4D,00
021C:  CLRF   FF7
021E:  ADDLW  2C
0220:  MOVWF  FF6
0222:  MOVLW  02
0224:  ADDWFC FF7,F
0226:  TBLRD*+
0228:  MOVF   FF5,W
022A:  RETURN 0
022C:  DATA 54,65
022E:  DATA 6D,70
0230:  DATA 65,72
0232:  DATA 61,74
0234:  DATA 75,72
0236:  DATA 61,3A
0238:  DATA 20,00
023A:  CLRF   FF7
023C:  ADDLW  4A
023E:  MOVWF  FF6
0240:  MOVLW  02
0242:  ADDWFC FF7,F
0244:  TBLRD*+
0246:  MOVF   FF5,W
0248:  RETURN 0
024A:  DATA 50,72
024C:  DATA 63,65
024E:  DATA 6E,74
0250:  DATA 61,6A
0252:  DATA 65,3A
0254:  DATA 00,00
*
0B54:  MOVLW  8E
0B56:  MOVWF  00
0B58:  MOVFF  43D,01
0B5C:  MOVFF  43C,02
0B60:  CLRF   03
0B62:  MOVF   01,F
0B64:  BNZ   0B78
0B66:  MOVFF  02,01
0B6A:  CLRF   02
0B6C:  MOVLW  08
0B6E:  SUBWF  00,F
0B70:  MOVF   01,F
0B72:  BNZ   0B78
0B74:  CLRF   00
0B76:  BRA    0B88
0B78:  BCF    FD8.0
0B7A:  BTFSC  01.7
0B7C:  BRA    0B86
0B7E:  RLCF   02,F
0B80:  RLCF   01,F
0B82:  DECF   00,F
0B84:  BRA    0B78
0B86:  BCF    01.7
0B88:  RETURN 0
0B8A:  MOVLB  4
0B8C:  MOVF   x40,W
0B8E:  BTFSC  FD8.2
0B90:  BRA    0CDC
0B92:  MOVWF  x4C
0B94:  MOVF   x44,W
0B96:  BTFSC  FD8.2
0B98:  BRA    0CDC
0B9A:  SUBWF  x4C,F
0B9C:  BNC   0BA8
0B9E:  MOVLW  7F
0BA0:  ADDWF  x4C,F
0BA2:  BTFSC  FD8.0
0BA4:  BRA    0CDC
0BA6:  BRA    0BB4
0BA8:  MOVLW  81
0BAA:  SUBWF  x4C,F
0BAC:  BTFSS  FD8.0
0BAE:  BRA    0CDC
0BB0:  BTFSC  FD8.2
0BB2:  BRA    0CDC
0BB4:  MOVFF  44C,00
0BB8:  CLRF   01
0BBA:  CLRF   02
0BBC:  CLRF   03
0BBE:  CLRF   x4B
0BC0:  MOVFF  441,44A
0BC4:  BSF    x4A.7
0BC6:  MOVFF  442,449
0BCA:  MOVFF  443,448
0BCE:  MOVLW  19
0BD0:  MOVWF  x4C
0BD2:  MOVF   x47,W
0BD4:  SUBWF  x48,F
0BD6:  BC    0BF2
0BD8:  MOVLW  01
0BDA:  SUBWF  x49,F
0BDC:  BC    0BF2
0BDE:  SUBWF  x4A,F
0BE0:  BC    0BF2
0BE2:  SUBWF  x4B,F
0BE4:  BC    0BF2
0BE6:  INCF   x4B,F
0BE8:  INCF   x4A,F
0BEA:  INCF   x49,F
0BEC:  MOVF   x47,W
0BEE:  ADDWF  x48,F
0BF0:  BRA    0C42
0BF2:  MOVF   x46,W
0BF4:  SUBWF  x49,F
0BF6:  BC    0C1C
0BF8:  MOVLW  01
0BFA:  SUBWF  x4A,F
0BFC:  BC    0C1C
0BFE:  SUBWF  x4B,F
0C00:  BC    0C1C
0C02:  INCF   x4B,F
0C04:  INCF   x4A,F
0C06:  MOVF   x46,W
0C08:  ADDWF  x49,F
0C0A:  MOVF   x47,W
0C0C:  ADDWF  x48,F
0C0E:  BNC   0C42
0C10:  INCF   x49,F
0C12:  BNZ   0C42
0C14:  INCF   x4A,F
0C16:  BNZ   0C42
0C18:  INCF   x4B,F
0C1A:  BRA    0C42
0C1C:  MOVF   x45,W
0C1E:  IORLW  80
0C20:  SUBWF  x4A,F
0C22:  BC    0C40
0C24:  MOVLW  01
0C26:  SUBWF  x4B,F
0C28:  BC    0C40
0C2A:  INCF   x4B,F
0C2C:  MOVF   x45,W
0C2E:  IORLW  80
0C30:  ADDWF  x4A,F
0C32:  MOVF   x46,W
0C34:  ADDWF  x49,F
0C36:  BNC   0C0A
0C38:  INCF   x4A,F
0C3A:  BNZ   0C0A
0C3C:  INCF   x4B,F
0C3E:  BRA    0C0A
0C40:  BSF    03.0
0C42:  DECFSZ x4C,F
0C44:  BRA    0C48
0C46:  BRA    0C5E
0C48:  BCF    FD8.0
0C4A:  RLCF   x48,F
0C4C:  RLCF   x49,F
0C4E:  RLCF   x4A,F
0C50:  RLCF   x4B,F
0C52:  BCF    FD8.0
0C54:  RLCF   03,F
0C56:  RLCF   02,F
0C58:  RLCF   01,F
0C5A:  RLCF   x4D,F
0C5C:  BRA    0BD2
0C5E:  BTFSS  x4D.0
0C60:  BRA    0C6E
0C62:  BCF    FD8.0
0C64:  RRCF   01,F
0C66:  RRCF   02,F
0C68:  RRCF   03,F
0C6A:  RRCF   x4D,F
0C6C:  BRA    0C72
0C6E:  DECF   00,F
0C70:  BZ    0CDC
0C72:  BTFSC  x4D.7
0C74:  BRA    0CB2
0C76:  BCF    FD8.0
0C78:  RLCF   x48,F
0C7A:  RLCF   x49,F
0C7C:  RLCF   x4A,F
0C7E:  RLCF   x4B,F
0C80:  MOVF   x47,W
0C82:  SUBWF  x48,F
0C84:  BC    0C94
0C86:  MOVLW  01
0C88:  SUBWF  x49,F
0C8A:  BC    0C94
0C8C:  SUBWF  x4A,F
0C8E:  BC    0C94
0C90:  SUBWF  x4B,F
0C92:  BNC   0CC8
0C94:  MOVF   x46,W
0C96:  SUBWF  x49,F
0C98:  BC    0CA4
0C9A:  MOVLW  01
0C9C:  SUBWF  x4A,F
0C9E:  BC    0CA4
0CA0:  SUBWF  x4B,F
0CA2:  BNC   0CC8
0CA4:  MOVF   x45,W
0CA6:  IORLW  80
0CA8:  SUBWF  x4A,F
0CAA:  BC    0CB2
0CAC:  MOVLW  01
0CAE:  SUBWF  x4B,F
0CB0:  BNC   0CC8
0CB2:  INCF   03,F
0CB4:  BNZ   0CC8
0CB6:  INCF   02,F
0CB8:  BNZ   0CC8
0CBA:  INCF   01,F
0CBC:  BNZ   0CC8
0CBE:  INCF   00,F
0CC0:  BZ    0CDC
0CC2:  RRCF   01,F
0CC4:  RRCF   02,F
0CC6:  RRCF   03,F
0CC8:  MOVFF  441,44C
0CCC:  MOVF   x45,W
0CCE:  XORWF  x4C,F
0CD0:  BTFSS  x4C.7
0CD2:  BRA    0CD8
0CD4:  BSF    01.7
0CD6:  BRA    0CE4
0CD8:  BCF    01.7
0CDA:  BRA    0CE4
0CDC:  CLRF   00
0CDE:  CLRF   01
0CE0:  CLRF   02
0CE2:  CLRF   03
0CE4:  MOVLB  0
0CE6:  RETURN 0
0CE8:  MOVLB  4
0CEA:  MOVF   x49,W
0CEC:  BTFSC  FD8.2
0CEE:  BRA    0DD2
0CF0:  MOVWF  00
0CF2:  MOVF   x4D,W
0CF4:  BTFSC  FD8.2
0CF6:  BRA    0DD2
0CF8:  ADDWF  00,F
0CFA:  BNC   0D04
0CFC:  MOVLW  81
0CFE:  ADDWF  00,F
0D00:  BC    0DD2
0D02:  BRA    0D0C
0D04:  MOVLW  7F
0D06:  SUBWF  00,F
0D08:  BNC   0DD2
0D0A:  BZ    0DD2
0D0C:  MOVFF  44A,451
0D10:  MOVF   x4E,W
0D12:  XORWF  x51,F
0D14:  BSF    x4A.7
0D16:  BSF    x4E.7
0D18:  MOVF   x4C,W
0D1A:  MULWF  x50
0D1C:  MOVFF  FF4,453
0D20:  MOVF   x4B,W
0D22:  MULWF  x4F
0D24:  MOVFF  FF4,03
0D28:  MOVFF  FF3,452
0D2C:  MULWF  x50
0D2E:  MOVF   FF3,W
0D30:  ADDWF  x53,F
0D32:  MOVF   FF4,W
0D34:  ADDWFC x52,F
0D36:  MOVLW  00
0D38:  ADDWFC 03,F
0D3A:  MOVF   x4C,W
0D3C:  MULWF  x4F
0D3E:  MOVF   FF3,W
0D40:  ADDWF  x53,F
0D42:  MOVF   FF4,W
0D44:  ADDWFC x52,F
0D46:  MOVLW  00
0D48:  CLRF   02
0D4A:  ADDWFC 03,F
0D4C:  ADDWFC 02,F
0D4E:  MOVF   x4A,W
0D50:  MULWF  x50
0D52:  MOVF   FF3,W
0D54:  ADDWF  x52,F
0D56:  MOVF   FF4,W
0D58:  ADDWFC 03,F
0D5A:  MOVLW  00
0D5C:  ADDWFC 02,F
0D5E:  MOVF   x4A,W
0D60:  MULWF  x4F
0D62:  MOVF   FF3,W
0D64:  ADDWF  03,F
0D66:  MOVF   FF4,W
0D68:  ADDWFC 02,F
0D6A:  MOVLW  00
0D6C:  CLRF   01
0D6E:  ADDWFC 01,F
0D70:  MOVF   x4C,W
0D72:  MULWF  x4E
0D74:  MOVF   FF3,W
0D76:  ADDWF  x52,F
0D78:  MOVF   FF4,W
0D7A:  ADDWFC 03,F
0D7C:  MOVLW  00
0D7E:  ADDWFC 02,F
0D80:  ADDWFC 01,F
0D82:  MOVF   x4B,W
0D84:  MULWF  x4E
0D86:  MOVF   FF3,W
0D88:  ADDWF  03,F
0D8A:  MOVF   FF4,W
0D8C:  ADDWFC 02,F
0D8E:  MOVLW  00
0D90:  ADDWFC 01,F
0D92:  MOVF   x4A,W
0D94:  MULWF  x4E
0D96:  MOVF   FF3,W
0D98:  ADDWF  02,F
0D9A:  MOVF   FF4,W
0D9C:  ADDWFC 01,F
0D9E:  INCF   00,F
0DA0:  BTFSC  01.7
0DA2:  BRA    0DAE
0DA4:  RLCF   x52,F
0DA6:  RLCF   03,F
0DA8:  RLCF   02,F
0DAA:  RLCF   01,F
0DAC:  DECF   00,F
0DAE:  MOVLW  00
0DB0:  BTFSS  x52.7
0DB2:  BRA    0DC8
0DB4:  INCF   03,F
0DB6:  ADDWFC 02,F
0DB8:  ADDWFC 01,F
0DBA:  MOVF   01,W
0DBC:  BNZ   0DC8
0DBE:  MOVF   02,W
0DC0:  BNZ   0DC8
0DC2:  MOVF   03,W
0DC4:  BNZ   0DC8
0DC6:  INCF   00,F
0DC8:  BTFSC  x51.7
0DCA:  BSF    01.7
0DCC:  BTFSS  x51.7
0DCE:  BCF    01.7
0DD0:  BRA    0DDA
0DD2:  CLRF   00
0DD4:  CLRF   01
0DD6:  CLRF   02
0DD8:  CLRF   03
0DDA:  MOVLB  0
0DDC:  RETURN 0
0DDE:  MOVFF  41F,FEA
0DE2:  MOVFF  41E,FE9
0DE6:  MOVLB  4
0DE8:  MOVFF  449,FEF
0DEC:  INCF   FE9,F
0DEE:  BTFSC  FD8.2
0DF0:  INCF   FEA,F
0DF2:  CLRF   FEF
0DF4:  INCF   x1E,F
0DF6:  BTFSC  FD8.2
0DF8:  INCF   x1F,F
0DFA:  MOVLB  0
0DFC:  RETURN 0
0DFE:  MOVFF  FEA,444
0E02:  MOVFF  FE9,443
0E06:  MOVLB  4
0E08:  SWAPF  x3D,W
0E0A:  IORLW  F0
0E0C:  MOVWF  x3F
0E0E:  ADDWF  x3F,F
0E10:  ADDLW  E2
0E12:  MOVWF  x40
0E14:  ADDLW  32
0E16:  MOVWF  x42
0E18:  MOVF   x3D,W
0E1A:  ANDLW  0F
0E1C:  ADDWF  x40,F
0E1E:  ADDWF  x40,F
0E20:  ADDWF  x42,F
0E22:  ADDLW  E9
0E24:  MOVWF  x41
0E26:  ADDWF  x41,F
0E28:  ADDWF  x41,F
0E2A:  SWAPF  x3C,W
0E2C:  ANDLW  0F
0E2E:  ADDWF  x41,F
0E30:  ADDWF  x42,F
0E32:  RLCF   x41,F
0E34:  RLCF   x42,F
0E36:  COMF   x42,F
0E38:  RLCF   x42,F
0E3A:  MOVF   x3C,W
0E3C:  ANDLW  0F
0E3E:  ADDWF  x42,F
0E40:  RLCF   x3F,F
0E42:  MOVLW  07
0E44:  MOVWF  x3E
0E46:  MOVLW  0A
0E48:  DECF   x41,F
0E4A:  ADDWF  x42,F
0E4C:  BNC   0E48
0E4E:  DECF   x40,F
0E50:  ADDWF  x41,F
0E52:  BNC   0E4E
0E54:  DECF   x3F,F
0E56:  ADDWF  x40,F
0E58:  BNC   0E54
0E5A:  DECF   x3E,F
0E5C:  ADDWF  x3F,F
0E5E:  BNC   0E5A
0E60:  MOVLW  04
0E62:  MOVWF  FEA
0E64:  MOVLW  3E
0E66:  MOVWF  FE9
0E68:  MOVLW  07
0E6A:  ANDWF  x43,W
0E6C:  BCF    x43.6
0E6E:  ADDWF  FE9,F
0E70:  MOVLW  00
0E72:  ADDWFC FEA,F
0E74:  MOVF   FE9,W
0E76:  SUBLW  42
0E78:  BNZ   0E82
0E7A:  MOVF   FEA,W
0E7C:  SUBLW  04
0E7E:  BNZ   0E82
0E80:  BSF    x43.6
0E82:  MOVF   FEF,W
0E84:  MOVWF  00
0E86:  BNZ   0E98
0E88:  BTFSC  x43.6
0E8A:  BRA    0E98
0E8C:  BTFSC  x43.4
0E8E:  BRA    0EBA
0E90:  BTFSC  x43.3
0E92:  BRA    0E98
0E94:  MOVLW  20
0E96:  BRA    0E9E
0E98:  BSF    x43.3
0E9A:  BCF    x43.4
0E9C:  MOVLW  30
0E9E:  ADDWF  00,F
0EA0:  MOVFF  FEA,43D
0EA4:  MOVFF  FE9,43C
0EA8:  MOVFF  00,449
0EAC:  MOVLB  0
0EAE:  RCALL  0DDE
0EB0:  MOVFF  43D,FEA
0EB4:  MOVFF  43C,FE9
0EB8:  MOVLB  4
0EBA:  MOVF   FEE,W
0EBC:  BTFSS  x43.6
0EBE:  BRA    0E74
0EC0:  MOVLB  0
0EC2:  GOTO   197A (RETURN)
0EC6:  MOVLB  4
0EC8:  MOVF   x49,W
0ECA:  SUBLW  B6
0ECC:  MOVWF  x49
0ECE:  CLRF   03
0ED0:  MOVFF  44A,44D
0ED4:  BSF    x4A.7
0ED6:  BCF    FD8.0
0ED8:  RRCF   x4A,F
0EDA:  RRCF   x4B,F
0EDC:  RRCF   x4C,F
0EDE:  RRCF   03,F
0EE0:  RRCF   02,F
0EE2:  RRCF   01,F
0EE4:  RRCF   00,F
0EE6:  DECFSZ x49,F
0EE8:  BRA    0ED6
0EEA:  BTFSS  x4D.7
0EEC:  BRA    0F04
0EEE:  COMF   00,F
0EF0:  COMF   01,F
0EF2:  COMF   02,F
0EF4:  COMF   03,F
0EF6:  INCF   00,F
0EF8:  BTFSC  FD8.2
0EFA:  INCF   01,F
0EFC:  BTFSC  FD8.2
0EFE:  INCF   02,F
0F00:  BTFSC  FD8.2
0F02:  INCF   03,F
0F04:  MOVLB  0
0F06:  GOTO   0FF4 (RETURN)
0F0A:  BTFSC  FD8.1
0F0C:  BRA    0F16
0F0E:  MOVLW  04
0F10:  MOVWF  FEA
0F12:  MOVLW  51
0F14:  MOVWF  FE9
0F16:  CLRF   00
0F18:  CLRF   01
0F1A:  CLRF   02
0F1C:  CLRF   03
0F1E:  MOVLB  4
0F20:  CLRF   x51
0F22:  CLRF   x52
0F24:  CLRF   x53
0F26:  CLRF   x54
0F28:  MOVF   x50,W
0F2A:  IORWF  x4F,W
0F2C:  IORWF  x4E,W
0F2E:  IORWF  x4D,W
0F30:  BZ    0F8A
0F32:  MOVLW  20
0F34:  MOVWF  x55
0F36:  BCF    FD8.0
0F38:  RLCF   x49,F
0F3A:  RLCF   x4A,F
0F3C:  RLCF   x4B,F
0F3E:  RLCF   x4C,F
0F40:  RLCF   x51,F
0F42:  RLCF   x52,F
0F44:  RLCF   x53,F
0F46:  RLCF   x54,F
0F48:  MOVF   x50,W
0F4A:  SUBWF  x54,W
0F4C:  BNZ   0F5E
0F4E:  MOVF   x4F,W
0F50:  SUBWF  x53,W
0F52:  BNZ   0F5E
0F54:  MOVF   x4E,W
0F56:  SUBWF  x52,W
0F58:  BNZ   0F5E
0F5A:  MOVF   x4D,W
0F5C:  SUBWF  x51,W
0F5E:  BNC   0F7E
0F60:  MOVF   x4D,W
0F62:  SUBWF  x51,F
0F64:  MOVF   x4E,W
0F66:  BTFSS  FD8.0
0F68:  INCFSZ x4E,W
0F6A:  SUBWF  x52,F
0F6C:  MOVF   x4F,W
0F6E:  BTFSS  FD8.0
0F70:  INCFSZ x4F,W
0F72:  SUBWF  x53,F
0F74:  MOVF   x50,W
0F76:  BTFSS  FD8.0
0F78:  INCFSZ x50,W
0F7A:  SUBWF  x54,F
0F7C:  BSF    FD8.0
0F7E:  RLCF   00,F
0F80:  RLCF   01,F
0F82:  RLCF   02,F
0F84:  RLCF   03,F
0F86:  DECFSZ x55,F
0F88:  BRA    0F36
0F8A:  MOVFF  451,FEF
0F8E:  MOVFF  452,FEC
0F92:  MOVFF  453,FEC
0F96:  MOVFF  454,FEC
0F9A:  MOVLB  0
0F9C:  RETURN 0
0F9E:  MOVF   FE9,W
0FA0:  MOVLB  4
0FA2:  MOVWF  x41
0FA4:  MOVF   x40,W
0FA6:  MOVWF  x43
0FA8:  BZ    0FE0
0FAA:  MOVFF  43F,44C
0FAE:  MOVFF  43E,44B
0FB2:  MOVFF  43D,44A
0FB6:  MOVFF  43C,449
0FBA:  CLRF   x50
0FBC:  CLRF   x4F
0FBE:  MOVLW  20
0FC0:  MOVWF  x4E
0FC2:  MOVLW  82
0FC4:  MOVWF  x4D
0FC6:  MOVLB  0
0FC8:  RCALL  0CE8
0FCA:  MOVFF  03,43F
0FCE:  MOVFF  02,43E
0FD2:  MOVFF  01,43D
0FD6:  MOVFF  00,43C
0FDA:  MOVLB  4
0FDC:  DECFSZ x43,F
0FDE:  BRA    0FAA
0FE0:  MOVFF  43F,44C
0FE4:  MOVFF  43E,44B
0FE8:  MOVFF  43D,44A
0FEC:  MOVFF  43C,449
0FF0:  MOVLB  0
0FF2:  BRA    0EC6
0FF4:  MOVFF  03,43F
0FF8:  MOVFF  02,43E
0FFC:  MOVFF  01,43D
1000:  MOVFF  00,43C
1004:  MOVLB  4
1006:  BTFSS  x3F.7
1008:  BRA    1024
100A:  DECF   x41,F
100C:  BSF    x41.5
100E:  COMF   x3C,F
1010:  COMF   x3D,F
1012:  COMF   x3E,F
1014:  COMF   x3F,F
1016:  INCF   x3C,F
1018:  BTFSC  FD8.2
101A:  INCF   x3D,F
101C:  BTFSC  FD8.2
101E:  INCF   x3E,F
1020:  BTFSC  FD8.2
1022:  INCF   x3F,F
1024:  MOVLW  3B
1026:  MOVWF  x48
1028:  MOVLW  9A
102A:  MOVWF  x47
102C:  MOVLW  CA
102E:  MOVWF  x46
1030:  CLRF   x45
1032:  MOVLW  0A
1034:  MOVWF  x43
1036:  MOVF   x40,W
1038:  BTFSC  FD8.2
103A:  INCF   x41,F
103C:  BSF    FD8.1
103E:  MOVLW  04
1040:  MOVWF  FEA
1042:  MOVLW  3C
1044:  MOVWF  FE9
1046:  MOVFF  43F,44C
104A:  MOVFF  43E,44B
104E:  MOVFF  43D,44A
1052:  MOVFF  43C,449
1056:  MOVFF  448,450
105A:  MOVFF  447,44F
105E:  MOVFF  446,44E
1062:  MOVFF  445,44D
1066:  MOVLB  0
1068:  RCALL  0F0A
106A:  MOVF   01,W
106C:  MOVF   00,F
106E:  BNZ   1096
1070:  MOVLB  4
1072:  INCF   x40,W
1074:  SUBWF  x43,W
1076:  BTFSS  FD8.2
1078:  BRA    107E
107A:  MOVLB  0
107C:  BRA    1096
107E:  MOVF   x41,W
1080:  BZ    109C
1082:  ANDLW  0F
1084:  SUBWF  x43,W
1086:  BZ    108A
1088:  BC    110A
108A:  BTFSC  x41.7
108C:  BRA    110A
108E:  BTFSC  x41.6
1090:  BRA    109C
1092:  MOVLW  20
1094:  BRA    10FE
1096:  MOVLW  20
1098:  MOVLB  4
109A:  ANDWF  x41,F
109C:  BTFSS  x41.5
109E:  BRA    10BC
10A0:  BCF    x41.5
10A2:  MOVF   x40,W
10A4:  BTFSS  FD8.2
10A6:  DECF   x41,F
10A8:  MOVF   00,W
10AA:  MOVWF  x41
10AC:  MOVLW  2D
10AE:  MOVWF  x49
10B0:  MOVLB  0
10B2:  RCALL  0DDE
10B4:  MOVLB  4
10B6:  MOVF   x41,W
10B8:  MOVWF  00
10BA:  CLRF   x41
10BC:  MOVF   x40,W
10BE:  SUBWF  x43,W
10C0:  BNZ   10DA
10C2:  MOVF   00,W
10C4:  MOVWF  x41
10C6:  MOVLW  2E
10C8:  MOVWF  x49
10CA:  MOVLB  0
10CC:  RCALL  0DDE
10CE:  MOVLB  4
10D0:  MOVF   x41,W
10D2:  MOVWF  00
10D4:  MOVLW  20
10D6:  ANDWF  x41,F
10D8:  MOVLW  00
10DA:  MOVLW  30
10DC:  BTFSS  x41.5
10DE:  BRA    10FE
10E0:  BCF    x41.5
10E2:  MOVF   x40,W
10E4:  BTFSS  FD8.2
10E6:  DECF   x41,F
10E8:  MOVF   00,W
10EA:  MOVWF  x41
10EC:  MOVLW  2D
10EE:  MOVWF  x49
10F0:  MOVLB  0
10F2:  RCALL  0DDE
10F4:  MOVLB  4
10F6:  MOVF   x41,W
10F8:  MOVWF  00
10FA:  CLRF   x41
10FC:  MOVLW  30
10FE:  ADDWF  00,F
1100:  MOVFF  00,449
1104:  MOVLB  0
1106:  RCALL  0DDE
1108:  MOVLB  4
110A:  BCF    FD8.1
110C:  MOVFF  448,44C
1110:  MOVFF  447,44B
1114:  MOVFF  446,44A
1118:  MOVFF  445,449
111C:  CLRF   x50
111E:  CLRF   x4F
1120:  CLRF   x4E
1122:  MOVLW  0A
1124:  MOVWF  x4D
1126:  MOVLB  0
1128:  RCALL  0F0A
112A:  MOVFF  03,448
112E:  MOVFF  02,447
1132:  MOVFF  01,446
1136:  MOVFF  00,445
113A:  MOVLB  4
113C:  DECFSZ x43,F
113E:  BRA    103C
1140:  MOVLB  0
1142:  RETURN 0
1144:  MOVLW  80
1146:  BTFSS  FD8.1
1148:  BRA    114E
114A:  MOVLB  4
114C:  XORWF  x41,F
114E:  MOVLB  4
1150:  CLRF   x46
1152:  CLRF   x47
1154:  MOVFF  43D,445
1158:  MOVF   x41,W
115A:  XORWF  x45,F
115C:  MOVF   x3C,W
115E:  BTFSC  FD8.2
1160:  BRA    1320
1162:  MOVWF  x44
1164:  MOVWF  00
1166:  MOVF   x40,W
1168:  BTFSC  FD8.2
116A:  BRA    1332
116C:  SUBWF  x44,F
116E:  BTFSC  FD8.2
1170:  BRA    1278
1172:  BNC   11F0
1174:  MOVFF  441,44A
1178:  BSF    x4A.7
117A:  MOVFF  442,449
117E:  MOVFF  443,448
1182:  CLRF   x47
1184:  BCF    FD8.0
1186:  RRCF   x4A,F
1188:  RRCF   x49,F
118A:  RRCF   x48,F
118C:  RRCF   x47,F
118E:  DECFSZ x44,F
1190:  BRA    1182
1192:  BTFSS  x45.7
1194:  BRA    119C
1196:  BSF    x46.0
1198:  BRA    135A
119A:  BCF    x46.0
119C:  BCF    x44.0
119E:  BSF    x46.4
11A0:  MOVLW  04
11A2:  MOVWF  FEA
11A4:  MOVLW  3F
11A6:  MOVWF  FE9
11A8:  BRA    1380
11AA:  BCF    x46.4
11AC:  BTFSC  x45.7
11AE:  BRA    11C4
11B0:  BTFSS  x44.0
11B2:  BRA    11DA
11B4:  RRCF   x4A,F
11B6:  RRCF   x49,F
11B8:  RRCF   x48,F
11BA:  RRCF   x47,F
11BC:  INCF   00,F
11BE:  BTFSC  FD8.2
11C0:  BRA    1350
11C2:  BRA    11DA
11C4:  BTFSC  x4A.7
11C6:  BRA    11E0
11C8:  BCF    FD8.0
11CA:  RLCF   x47,F
11CC:  RLCF   x48,F
11CE:  RLCF   x49,F
11D0:  RLCF   x4A,F
11D2:  DECF   00,F
11D4:  BTFSC  FD8.2
11D6:  BRA    1350
11D8:  BRA    11C4
11DA:  BSF    x46.6
11DC:  BRA    12B8
11DE:  BCF    x46.6
11E0:  MOVFF  43D,445
11E4:  BTFSS  x3D.7
11E6:  BRA    11EC
11E8:  BSF    x4A.7
11EA:  BRA    1342
11EC:  BCF    x4A.7
11EE:  BRA    1342
11F0:  MOVFF  440,444
11F4:  MOVFF  440,00
11F8:  MOVF   x3C,W
11FA:  SUBWF  x44,F
11FC:  MOVFF  43D,44A
1200:  BSF    x4A.7
1202:  MOVFF  43E,449
1206:  MOVFF  43F,448
120A:  CLRF   x47
120C:  BCF    FD8.0
120E:  RRCF   x4A,F
1210:  RRCF   x49,F
1212:  RRCF   x48,F
1214:  RRCF   x47,F
1216:  DECFSZ x44,F
1218:  BRA    120A
121A:  BTFSS  x45.7
121C:  BRA    1224
121E:  BSF    x46.1
1220:  BRA    135A
1222:  BCF    x46.1
1224:  BCF    x44.0
1226:  BSF    x46.5
1228:  MOVLW  04
122A:  MOVWF  FEA
122C:  MOVLW  43
122E:  MOVWF  FE9
1230:  BRA    1380
1232:  BCF    x46.5
1234:  BTFSC  x45.7
1236:  BRA    124C
1238:  BTFSS  x44.0
123A:  BRA    1262
123C:  RRCF   x4A,F
123E:  RRCF   x49,F
1240:  RRCF   x48,F
1242:  RRCF   x47,F
1244:  INCF   00,F
1246:  BTFSC  FD8.2
1248:  BRA    1350
124A:  BRA    1262
124C:  BTFSC  x4A.7
124E:  BRA    1268
1250:  BCF    FD8.0
1252:  RLCF   x47,F
1254:  RLCF   x48,F
1256:  RLCF   x49,F
1258:  RLCF   x4A,F
125A:  DECF   00,F
125C:  BTFSC  FD8.2
125E:  BRA    1350
1260:  BRA    124C
1262:  BSF    x46.7
1264:  BRA    12B8
1266:  BCF    x46.7
1268:  MOVFF  441,445
126C:  BTFSS  x41.7
126E:  BRA    1274
1270:  BSF    x4A.7
1272:  BRA    1342
1274:  BCF    x4A.7
1276:  BRA    1342
1278:  MOVFF  441,44A
127C:  BSF    x4A.7
127E:  MOVFF  442,449
1282:  MOVFF  443,448
1286:  BTFSS  x45.7
1288:  BRA    1292
128A:  BCF    x4A.7
128C:  BSF    x46.2
128E:  BRA    135A
1290:  BCF    x46.2
1292:  CLRF   x47
1294:  BCF    x44.0
1296:  MOVLW  04
1298:  MOVWF  FEA
129A:  MOVLW  3F
129C:  MOVWF  FE9
129E:  BRA    1380
12A0:  BTFSC  x45.7
12A2:  BRA    12DC
12A4:  MOVFF  43D,445
12A8:  BTFSS  x44.0
12AA:  BRA    12B8
12AC:  RRCF   x4A,F
12AE:  RRCF   x49,F
12B0:  RRCF   x48,F
12B2:  RRCF   x47,F
12B4:  INCF   00,F
12B6:  BZ    1350
12B8:  BTFSS  x47.7
12BA:  BRA    12D2
12BC:  INCF   x48,F
12BE:  BNZ   12D2
12C0:  INCF   x49,F
12C2:  BNZ   12D2
12C4:  INCF   x4A,F
12C6:  BNZ   12D2
12C8:  RRCF   x4A,F
12CA:  RRCF   x49,F
12CC:  RRCF   x48,F
12CE:  INCF   00,F
12D0:  BZ    1350
12D2:  BTFSC  x46.6
12D4:  BRA    11DE
12D6:  BTFSC  x46.7
12D8:  BRA    1266
12DA:  BRA    1314
12DC:  MOVLW  80
12DE:  XORWF  x4A,F
12E0:  BTFSS  x4A.7
12E2:  BRA    12EC
12E4:  BRA    135A
12E6:  MOVFF  441,445
12EA:  BRA    1300
12EC:  MOVFF  43D,445
12F0:  MOVF   x4A,F
12F2:  BNZ   1300
12F4:  MOVF   x49,F
12F6:  BNZ   1300
12F8:  MOVF   x48,F
12FA:  BNZ   1300
12FC:  CLRF   00
12FE:  BRA    1342
1300:  BTFSC  x4A.7
1302:  BRA    1314
1304:  BCF    FD8.0
1306:  RLCF   x47,F
1308:  RLCF   x48,F
130A:  RLCF   x49,F
130C:  RLCF   x4A,F
130E:  DECFSZ 00,F
1310:  BRA    1300
1312:  BRA    1350
1314:  BTFSS  x45.7
1316:  BRA    131C
1318:  BSF    x4A.7
131A:  BRA    1342
131C:  BCF    x4A.7
131E:  BRA    1342
1320:  MOVFF  440,00
1324:  MOVFF  441,44A
1328:  MOVFF  442,449
132C:  MOVFF  443,448
1330:  BRA    1342
1332:  MOVFF  43C,00
1336:  MOVFF  43D,44A
133A:  MOVFF  43E,449
133E:  MOVFF  43F,448
1342:  MOVFF  44A,01
1346:  MOVFF  449,02
134A:  MOVFF  448,03
134E:  BRA    13B8
1350:  CLRF   00
1352:  CLRF   01
1354:  CLRF   02
1356:  CLRF   03
1358:  BRA    13B8
135A:  CLRF   x47
135C:  COMF   x48,F
135E:  COMF   x49,F
1360:  COMF   x4A,F
1362:  COMF   x47,F
1364:  INCF   x47,F
1366:  BNZ   1372
1368:  INCF   x48,F
136A:  BNZ   1372
136C:  INCF   x49,F
136E:  BNZ   1372
1370:  INCF   x4A,F
1372:  BTFSC  x46.0
1374:  BRA    119A
1376:  BTFSC  x46.1
1378:  BRA    1222
137A:  BTFSC  x46.2
137C:  BRA    1290
137E:  BRA    12E6
1380:  MOVF   FEF,W
1382:  ADDWF  x48,F
1384:  BNC   1390
1386:  INCF   x49,F
1388:  BNZ   1390
138A:  INCF   x4A,F
138C:  BTFSC  FD8.2
138E:  BSF    x44.0
1390:  MOVF   FED,F
1392:  MOVF   FEF,W
1394:  ADDWF  x49,F
1396:  BNC   139E
1398:  INCF   x4A,F
139A:  BTFSC  FD8.2
139C:  BSF    x44.0
139E:  MOVF   FED,F
13A0:  MOVF   FEF,W
13A2:  BTFSC  FEF.7
13A4:  BRA    13A8
13A6:  XORLW  80
13A8:  ADDWF  x4A,F
13AA:  BTFSC  FD8.0
13AC:  BSF    x44.0
13AE:  BTFSC  x46.4
13B0:  BRA    11AA
13B2:  BTFSC  x46.5
13B4:  BRA    1232
13B6:  BRA    12A0
13B8:  MOVLB  0
13BA:  GOTO   1A44 (RETURN)
13BE:  MOVFF  43D,444
13C2:  MOVLB  4
13C4:  MOVF   x41,W
13C6:  XORWF  x44,F
13C8:  BTFSS  x44.7
13CA:  BRA    13D6
13CC:  BCF    FD8.2
13CE:  BCF    FD8.0
13D0:  BTFSC  x3D.7
13D2:  BSF    FD8.0
13D4:  BRA    1434
13D6:  MOVFF  43D,444
13DA:  MOVFF  440,445
13DE:  MOVF   x3C,W
13E0:  SUBWF  x45,F
13E2:  BZ    13F0
13E4:  BTFSS  x44.7
13E6:  BRA    1434
13E8:  MOVF   FD8,W
13EA:  XORLW  01
13EC:  MOVWF  FD8
13EE:  BRA    1434
13F0:  MOVFF  441,445
13F4:  MOVF   x3D,W
13F6:  SUBWF  x45,F
13F8:  BZ    1406
13FA:  BTFSS  x44.7
13FC:  BRA    1434
13FE:  MOVF   FD8,W
1400:  XORLW  01
1402:  MOVWF  FD8
1404:  BRA    1434
1406:  MOVFF  442,445
140A:  MOVF   x3E,W
140C:  SUBWF  x45,F
140E:  BZ    141C
1410:  BTFSS  x44.7
1412:  BRA    1434
1414:  MOVF   FD8,W
1416:  XORLW  01
1418:  MOVWF  FD8
141A:  BRA    1434
141C:  MOVFF  443,445
1420:  MOVF   x3F,W
1422:  SUBWF  x45,F
1424:  BZ    1432
1426:  BTFSS  x44.7
1428:  BRA    1434
142A:  MOVF   FD8,W
142C:  XORLW  01
142E:  MOVWF  FD8
1430:  BRA    1434
1432:  BCF    FD8.0
1434:  MOVLB  0
1436:  RETURN 0
....................  
.................... #list 
....................  
.................... #device PASS_STRINGS = IN_RAM 
.................... #device adc = 10 
.................... #fuses xt, nowdt 
.................... #use I2C(MASTER, SDA=PIN_B0, SCL=PIN_B1, FAST=400000, STREAM=SSD1306_STREAM) 
*
027E:  MOVLW  08
0280:  MOVWF  01
0282:  NOP   
0284:  BCF    F8A.1
0286:  BCF    F93.1
0288:  NOP   
028A:  MOVLB  4
028C:  RLCF   x41,F
028E:  BCF    F8A.0
0290:  BTFSC  FD8.0
0292:  BSF    F93.0
0294:  BTFSS  FD8.0
0296:  BCF    F93.0
0298:  BSF    F93.1
029A:  BTFSS  F81.1
029C:  BRA    029A
029E:  DECFSZ 01,F
02A0:  BRA    02A4
02A2:  BRA    02A8
02A4:  MOVLB  0
02A6:  BRA    0282
02A8:  NOP   
02AA:  BCF    F8A.1
02AC:  BCF    F93.1
02AE:  NOP   
02B0:  BSF    F93.0
02B2:  NOP   
02B4:  NOP   
02B6:  BSF    F93.1
02B8:  BTFSS  F81.1
02BA:  BRA    02B8
02BC:  CLRF   01
02BE:  NOP   
02C0:  BTFSC  F81.0
02C2:  BSF    01.0
02C4:  BCF    F8A.1
02C6:  BCF    F93.1
02C8:  BCF    F8A.0
02CA:  BCF    F93.0
02CC:  MOVLB  0
02CE:  RETURN 0
.................... #use delay(internal = 8M) 
*
0256:  MOVLW  04
0258:  MOVWF  FEA
025A:  MOVLW  3E
025C:  MOVWF  FE9
025E:  MOVF   FEF,W
0260:  BZ    027C
0262:  MOVLW  02
0264:  MOVWF  01
0266:  CLRF   00
0268:  DECFSZ 00,F
026A:  BRA    0268
026C:  DECFSZ 01,F
026E:  BRA    0266
0270:  MOVLW  97
0272:  MOVWF  00
0274:  DECFSZ 00,F
0276:  BRA    0274
0278:  DECFSZ FEF,F
027A:  BRA    0262
027C:  RETURN 0
.................... //#define LCD_DATA_PORT getenv("SFR:PORTD")    
....................  
.................... #define SSD1306_I2C_ADDRESS 0x78 
.................... #include"lib/SSD1306_OLED.c"  
.................... #include <stdint.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... ////                           stdint.h                                //// 
.................... ////                                                                   //// 
.................... //// Standard integer definitions.                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDINT 
....................  
.................... #define _STDINT 
....................  
.................... //////////// exact width 
....................  
.................... typedef signed int8 int8_t; 
.................... typedef unsigned int8 uint8_t; 
.................... typedef signed int16 int16_t; 
.................... typedef unsigned int16 uint16_t; 
.................... typedef signed int32 int32_t; 
.................... typedef unsigned int32 uint32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int24_t; 
.................... //typedef unsigned int24 uint24_t; 
.................... typedef signed int64 int64_t; 
.................... typedef unsigned int64 uint64_t; 
.................... #endif 
....................  
.................... #define INT8_MAX  (128) 
.................... #define INT8_MIN  (-127) 
.................... #define UINT8_MAX (255) 
....................  
.................... #define INT16_MAX  (32767) 
.................... #define INT16_MIN  (-32768) 
.................... #define UINT16_MAX (65535) 
....................  
.................... #define INT32_MAX  (2147483647) 
.................... #define INT32_MIN  (-2147483648) 
.................... #define UINT32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT24_MAX  (8388607) 
.................... //#define INT24_MIN  (-8388608) 
.................... //#define UINT24_MAX (16777215) 
....................  
.................... #define INT64_MAX  (9223372036854775807) 
.................... #define INT64_MIN  (-9223372036854775808) 
.................... #define UINT64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// minimum width 
....................  
.................... typedef signed int8 int_least8_t; 
.................... typedef unsigned int8 uint_least8_t; 
.................... typedef signed int16 int_least16_t; 
.................... typedef unsigned int16 uint_least16_t; 
.................... typedef signed int32 int_least32_t; 
.................... typedef unsigned int32 uint_least32_t; 
....................  
.................... #if defined(__PCD__) 
.................... //typedef signed int24 int_least24_t; 
.................... //typedef unsigned int24 uint_least24_t; 
.................... typedef signed int64 int_least64_t; 
.................... typedef unsigned int64 uint_least64_t; 
.................... #endif 
....................  
.................... #define INT_LEAST8_MAX  (128) 
.................... #define INT_LEAST8_MIN  (-127) 
.................... #define UINT_LEAST8_MAX (255) 
....................  
.................... #define INT_LEAST16_MAX  (32767) 
.................... #define INT_LEAST16_MIN  (-32768) 
.................... #define UINT_LEAST16_MAX (65535) 
....................  
.................... #define INT_LEAST32_MAX  (2147483647) 
.................... #define INT_LEAST32_MIN  (-2147483648) 
.................... #define UINT_LEAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_LEAST24_MAX  (8388607) 
.................... //#define INT_LEAST24_MIN  (-8388608) 
.................... //#define UINT_LEAST24_MAX (16777215) 
....................  
.................... #define INT_LEAST64_MAX  (9223372036854775807) 
.................... #define INT_LEAST64_MIN  (-9223372036854775808) 
.................... #define UINT_LEAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... ///////// fastest width 
....................  
.................... #if defined(__PCD__) 
.................... typedef signed int16 int_fast8_t; 
.................... typedef unsigned int16 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (32767) 
.................... #define INT_FAST8_MIN  (-32768) 
.................... #define UINT_FAST8_MAX (65535) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... //typedef signed int24 int_fast24_t; 
.................... //typedef unsigned int24 uint_fast24_t; 
.................... typedef signed int64 int_fast64_t; 
.................... typedef unsigned int64 uint_fast64_t; 
.................... #else 
.................... typedef signed int8 int_fast8_t; 
.................... typedef unsigned int8 uint_fast8_t; 
.................... #define INT_FAST8_MAX  (128) 
.................... #define INT_FAST8_MIN  (-127) 
.................... #define UINT_FAST8_MAX (255) 
.................... typedef signed int16 int_fast16_t; 
.................... typedef unsigned int16 uint_fast16_t; 
.................... #endif 
....................  
.................... typedef signed int32 int_fast32_t; 
.................... typedef unsigned int32 uint_fast32_t; 
....................  
.................... #define INT_FAST16_MAX  (32767) 
.................... #define INT_FAST16_MIN  (-32768) 
.................... #define UINT_FAST16_MAX (65535) 
....................  
.................... #define INT_FAST32_MAX  (2147483647) 
.................... #define INT_FAST32_MIN  (-2147483648) 
.................... #define UINT_FAST32_MAX (4294967295) 
....................  
.................... #if defined(__PCD__) 
.................... //#define INT_FAST24_MAX  (8388607) 
.................... //#define INT_FAST24_MIN  (-8388608) 
.................... //#define UINT_FAST24_MAX (16777215) 
....................  
.................... #define INT_FAST64_MAX  (9223372036854775807) 
.................... #define INT_FAST64_MIN  (-9223372036854775808) 
.................... #define UINT_FAST64_MAX (18446744073709551615) 
.................... #endif 
....................  
.................... //////////// big enough to hold pointers (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intptr_t uintptr_t 
....................  
.................... /// INTPTRN_MIN INTPTRN_MAX UINTPTRN_MAX 
....................  
....................  
.................... /////////// greatest width (OPTIONAL) 
....................  
.................... /// TODO 
....................  
.................... /// intmax_t uintmax_t 
....................  
.................... /// INTMAXN_MIN INTMAXN_MAX UINTMAXN_MAX 
....................  
.................... /// INTMAX_C(value) UINTMAX_C(value) 
....................  
....................  
.................... #endif 
....................  
.................... //------------------------------ Definitions ---------------------------------// 
.................... //#define SSD1306_RST PIN_B2 
....................  
.................... #if !defined SSD1306_128_32 && !defined SSD1306_96_16 
.................... #define SSD1306_128_64 
.................... #endif 
.................... #if defined SSD1306_128_32 && defined SSD1306_96_16 
....................   #error "Only one SSD1306 display can be specified at once" 
.................... #endif 
....................  
.................... #if defined SSD1306_128_64 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            64 
.................... #endif 
.................... #if defined SSD1306_128_32 
....................   #define SSD1306_LCDWIDTH            128 
....................   #define SSD1306_LCDHEIGHT            32 
.................... #endif 
.................... #if defined SSD1306_96_16 
....................   #define SSD1306_LCDWIDTH             96 
....................   #define SSD1306_LCDHEIGHT            16 
.................... #endif 
....................  
.................... #define SSD1306_SETCONTRAST          0x81 
.................... #define SSD1306_DISPLAYALLON_RESUME  0xA4 
.................... #define SSD1306_DISPLAYALLON         0xA5 
.................... #define SSD1306_NORMALDISPLAY        0xA6 
.................... #define SSD1306_INVERTDISPLAY_       0xA7 
.................... #define SSD1306_DISPLAYOFF           0xAE 
.................... #define SSD1306_DISPLAYON            0xAF 
.................... #define SSD1306_SETDISPLAYOFFSET     0xD3 
.................... #define SSD1306_SETCOMPINS           0xDA 
.................... #define SSD1306_SETVCOMDETECT        0xDB 
.................... #define SSD1306_SETDISPLAYCLOCKDIV   0xD5 
.................... #define SSD1306_SETPRECHARGE         0xD9 
.................... #define SSD1306_SETMULTIPLEX         0xA8 
.................... #define SSD1306_SETLOWCOLUMN         0x00 
.................... #define SSD1306_SETHIGHCOLUMN        0x10 
.................... #define SSD1306_SETSTARTLINE         0x40 
.................... #define SSD1306_MEMORYMODE           0x20 
.................... #define SSD1306_COLUMNADDR           0x21 
.................... #define SSD1306_PAGEADDR             0x22 
.................... #define SSD1306_COMSCANINC           0xC0 
.................... #define SSD1306_COMSCANDEC           0xC8 
.................... #define SSD1306_SEGREMAP             0xA0 
.................... #define SSD1306_CHARGEPUMP           0x8D 
.................... #define SSD1306_EXTERNALVCC          0x01 
.................... #define SSD1306_SWITCHCAPVCC         0x02 
....................  
.................... // Scrolling #defines 
.................... #define SSD1306_ACTIVATE_SCROLL                      0x2F 
.................... #define SSD1306_DEACTIVATE_SCROLL                    0x2E 
.................... #define SSD1306_SET_VERTICAL_SCROLL_AREA             0xA3 
.................... #define SSD1306_RIGHT_HORIZONTAL_SCROLL              0x26 
.................... #define SSD1306_LEFT_HORIZONTAL_SCROLL               0x27 
.................... #define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29 
.................... #define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A 
....................  
.................... #define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; } 
....................  
.................... uint8_t _i2caddr, _vccstate, x_pos, y_pos, text_size; 
.................... int1 wrap = TRUE; 
....................  
.................... void ssd1306_command(uint8_t c); 
.................... void SSD1306_Begin(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS); 
.................... void SSD1306_DrawPixel(uint8_t x, uint8_t y, int1 color = TRUE); 
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop); 
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop); 
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop); 
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop); 
.................... void SSD1306_StopScroll(void); 
.................... void SSD1306_Dim(int1 dim); 
.................... void SSD1306_Display(void); 
.................... void SSD1306_ClearDisplay(void); 
.................... void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE); 
.................... void SSD1306_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE); 
.................... void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE); 
.................... void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE); 
.................... void SSD1306_FillScreen(int1 color = TRUE); 
.................... void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r); 
.................... void SSD1306_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername); 
.................... void SSD1306_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE); 
.................... void SSD1306_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE); 
.................... void SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h); 
.................... void SSD1306_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r); 
.................... void SSD1306_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE); 
.................... void SSD1306_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2); 
.................... void SSD1306_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE); 
.................... void SSD1306_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1); 
.................... void SSD1306_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1); 
.................... void SSD1306_TextSize(uint8_t t_size); 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y); 
.................... void SSD1306_Print(uint8_t c); 
.................... void SSD1306_PutCustomC(rom uint8_t *c); 
.................... void SSD1306_SetTextWrap(int1 w); 
.................... void SSD1306_InvertDisplay(int1 i); 
.................... void SSD1306_DrawBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h); 
....................  
.................... //--------------------------------------------------------------------------// 
....................  
.................... const char Font[] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x5F, 0x00, 0x00, 
.................... 0x00, 0x07, 0x00, 0x07, 0x00, 
.................... 0x14, 0x7F, 0x14, 0x7F, 0x14, 
.................... 0x24, 0x2A, 0x7F, 0x2A, 0x12, 
.................... 0x23, 0x13, 0x08, 0x64, 0x62, 
.................... 0x36, 0x49, 0x56, 0x20, 0x50, 
.................... 0x00, 0x08, 0x07, 0x03, 0x00, 
.................... 0x00, 0x1C, 0x22, 0x41, 0x00, 
.................... 0x00, 0x41, 0x22, 0x1C, 0x00, 
.................... 0x2A, 0x1C, 0x7F, 0x1C, 0x2A, 
.................... 0x08, 0x08, 0x3E, 0x08, 0x08, 
.................... 0x00, 0x80, 0x70, 0x30, 0x00, 
.................... 0x08, 0x08, 0x08, 0x08, 0x08, 
.................... 0x00, 0x00, 0x60, 0x60, 0x00, 
.................... 0x20, 0x10, 0x08, 0x04, 0x02, 
.................... 0x3E, 0x51, 0x49, 0x45, 0x3E, 
.................... 0x00, 0x42, 0x7F, 0x40, 0x00, 
.................... 0x72, 0x49, 0x49, 0x49, 0x46, 
.................... 0x21, 0x41, 0x49, 0x4D, 0x33, 
.................... 0x18, 0x14, 0x12, 0x7F, 0x10, 
.................... 0x27, 0x45, 0x45, 0x45, 0x39, 
.................... 0x3C, 0x4A, 0x49, 0x49, 0x31, 
.................... 0x41, 0x21, 0x11, 0x09, 0x07, 
.................... 0x36, 0x49, 0x49, 0x49, 0x36, 
.................... 0x46, 0x49, 0x49, 0x29, 0x1E, 
.................... 0x00, 0x00, 0x14, 0x00, 0x00, 
.................... 0x00, 0x40, 0x34, 0x00, 0x00, 
.................... 0x00, 0x08, 0x14, 0x22, 0x41, 
.................... 0x14, 0x14, 0x14, 0x14, 0x14, 
.................... 0x00, 0x41, 0x22, 0x14, 0x08, 
.................... 0x02, 0x01, 0x59, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x5D, 0x59, 0x4E, 
.................... 0x7C, 0x12, 0x11, 0x12, 0x7C, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x36, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x22, 
.................... 0x7F, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x49, 0x49, 0x49, 0x41, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x01, 
.................... 0x3E, 0x41, 0x41, 0x51, 0x73, 
.................... 0x7F, 0x08, 0x08, 0x08, 0x7F, 
.................... 0x00, 0x41, 0x7F, 0x41, 0x00, 
.................... 0x20, 0x40, 0x41, 0x3F, 0x01, 
.................... 0x7F, 0x08, 0x14, 0x22, 0x41, 
.................... 0x7F, 0x40, 0x40, 0x40, 0x40, 
.................... 0x7F, 0x02, 0x1C, 0x02, 0x7F, 
.................... 0x7F, 0x04, 0x08, 0x10, 0x7F, 
.................... 0x3E, 0x41, 0x41, 0x41, 0x3E, 
.................... 0x7F, 0x09, 0x09, 0x09, 0x06, 
.................... 0x3E, 0x41, 0x51, 0x21, 0x5E, 
.................... 0x7F, 0x09, 0x19, 0x29, 0x46 
.................... }; 
.................... const char Font2[] = { 
.................... 0x26, 0x49, 0x49, 0x49, 0x32, 
.................... 0x03, 0x01, 0x7F, 0x01, 0x03, 
.................... 0x3F, 0x40, 0x40, 0x40, 0x3F, 
.................... 0x1F, 0x20, 0x40, 0x20, 0x1F, 
.................... 0x3F, 0x40, 0x38, 0x40, 0x3F, 
.................... 0x63, 0x14, 0x08, 0x14, 0x63, 
.................... 0x03, 0x04, 0x78, 0x04, 0x03, 
.................... 0x61, 0x59, 0x49, 0x4D, 0x43, 
.................... 0x00, 0x7F, 0x41, 0x41, 0x41, 
.................... 0x02, 0x04, 0x08, 0x10, 0x20, 
.................... 0x00, 0x41, 0x41, 0x41, 0x7F, 
.................... 0x04, 0x02, 0x01, 0x02, 0x04, 
.................... 0x40, 0x40, 0x40, 0x40, 0x40, 
.................... 0x00, 0x03, 0x07, 0x08, 0x00, 
.................... 0x20, 0x54, 0x54, 0x78, 0x40, 
.................... 0x7F, 0x28, 0x44, 0x44, 0x38, 
.................... 0x38, 0x44, 0x44, 0x44, 0x28, 
.................... 0x38, 0x44, 0x44, 0x28, 0x7F, 
.................... 0x38, 0x54, 0x54, 0x54, 0x18, 
.................... 0x00, 0x08, 0x7E, 0x09, 0x02, 
.................... 0x18, 0xA4, 0xA4, 0x9C, 0x78, 
.................... 0x7F, 0x08, 0x04, 0x04, 0x78, 
.................... 0x00, 0x44, 0x7D, 0x40, 0x00, 
.................... 0x20, 0x40, 0x40, 0x3D, 0x00, 
.................... 0x7F, 0x10, 0x28, 0x44, 0x00, 
.................... 0x00, 0x41, 0x7F, 0x40, 0x00, 
.................... 0x7C, 0x04, 0x78, 0x04, 0x78, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x78, 
.................... 0x38, 0x44, 0x44, 0x44, 0x38, 
.................... 0xFC, 0x18, 0x24, 0x24, 0x18, 
.................... 0x18, 0x24, 0x24, 0x18, 0xFC, 
.................... 0x7C, 0x08, 0x04, 0x04, 0x08, 
.................... 0x48, 0x54, 0x54, 0x54, 0x24, 
.................... 0x04, 0x04, 0x3F, 0x44, 0x24, 
.................... 0x3C, 0x40, 0x40, 0x20, 0x7C, 
.................... 0x1C, 0x20, 0x40, 0x20, 0x1C, 
.................... 0x3C, 0x40, 0x30, 0x40, 0x3C, 
.................... 0x44, 0x28, 0x10, 0x28, 0x44, 
.................... 0x4C, 0x90, 0x90, 0x90, 0x7C, 
.................... 0x44, 0x64, 0x54, 0x4C, 0x44, 
.................... 0x00, 0x08, 0x36, 0x41, 0x00, 
.................... 0x00, 0x00, 0x77, 0x00, 0x00, 
.................... 0x00, 0x41, 0x36, 0x08, 0x00, 
.................... 0x02, 0x01, 0x02, 0x04, 0x02 
.................... }; 
....................  
.................... static uint8_t ssd1306_buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] = { 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
.................... 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 
.................... 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF 
.................... #if (SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH > 96*16) 
.................... , 
.................... 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 
.................... 0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8, 
.................... 0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80, 
.................... 0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01, 
.................... 0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF, 
.................... 0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00, 
.................... 0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF, 
.................... 0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF, 
.................... 0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F, 
.................... 0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC, 
.................... 0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03, 
.................... 0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 
.................... 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00, 
.................... 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 
.................... 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03, 
.................... 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... #if (SSD1306_LCDHEIGHT == 64) 
.................... , 
.................... 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF9, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x1F, 0x0F, 
.................... 0x87, 0xC7, 0xF7, 0xFF, 0xFF, 0x1F, 0x1F, 0x3D, 0xFC, 0xF8, 0xF8, 0xF8, 0xF8, 0x7C, 0x7D, 0xFF, 
.................... 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x3F, 0x0F, 0x07, 0x00, 0x30, 0x30, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0xC0, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0xC0, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x3F, 0x1F, 
.................... 0x0F, 0x07, 0x1F, 0x7F, 0xFF, 0xFF, 0xF8, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xF8, 0xE0, 
.................... 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 
.................... 0x00, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x0E, 0xFC, 0xF8, 0x00, 0x00, 0xF0, 0xF8, 0x1C, 0x0E, 
.................... 0x06, 0x06, 0x06, 0x0C, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0x00, 0x00, 0xFC, 
.................... 0xFE, 0xFC, 0x00, 0x18, 0x3C, 0x7E, 0x66, 0xE6, 0xCE, 0x84, 0x00, 0x00, 0x06, 0xFF, 0xFF, 0x06, 
.................... 0x06, 0xFC, 0xFE, 0xFC, 0x0C, 0x06, 0x06, 0x06, 0x00, 0x00, 0xFE, 0xFE, 0x00, 0x00, 0xC0, 0xF8, 
.................... 0xFC, 0x4E, 0x46, 0x46, 0x46, 0x4E, 0x7C, 0x78, 0x40, 0x18, 0x3C, 0x76, 0xE6, 0xCE, 0xCC, 0x80, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x3F, 0x3F, 0x1F, 0x0F, 0x03, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 
.................... 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x03, 0x07, 0x0E, 0x0C, 
.................... 0x18, 0x18, 0x0C, 0x06, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x01, 0x0F, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 
.................... 0x07, 0x01, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 
.................... 0x00, 0x0F, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x00, 0x00, 0x00, 0x07, 
.................... 0x07, 0x0C, 0x0C, 0x18, 0x1C, 0x0C, 0x06, 0x06, 0x00, 0x04, 0x0E, 0x0C, 0x18, 0x0C, 0x0F, 0x07, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
.................... 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
.................... #endif 
.................... #endif 
.................... }; 
....................  
.................... void ssd1306_command(uint8_t c) 
*
02D0:  MOVLB  4
02D2:  CLRF   x40
.................... { 
....................     uint8_t control = 0x00;   // Co = 0, D/C = 0 
....................     I2C_Start(SSD1306_STREAM); 
02D4:  BSF    F93.0
02D6:  NOP   
02D8:  BSF    F93.1
02DA:  NOP   
02DC:  BCF    F8A.0
02DE:  BCF    F93.0
02E0:  NOP   
02E2:  BCF    F8A.1
02E4:  BCF    F93.1
....................     I2C_Write(SSD1306_STREAM, _i2caddr); 
02E6:  MOVFF  04,441
02EA:  MOVLB  0
02EC:  RCALL  027E
....................     I2C_Write(SSD1306_STREAM, control); 
02EE:  MOVFF  440,441
02F2:  RCALL  027E
....................     I2C_Write(SSD1306_STREAM, c); 
02F4:  MOVFF  43F,441
02F8:  RCALL  027E
....................     I2C_Stop(SSD1306_STREAM); 
02FA:  BCF    F93.0
02FC:  NOP   
02FE:  BSF    F93.1
0300:  BTFSS  F81.1
0302:  BRA    0300
0304:  NOP   
0306:  BRA    0308
0308:  NOP   
030A:  BSF    F93.0
030C:  NOP   
030E:  RETURN 0
.................... } 
....................  
.................... void SSD1306_Begin(uint8_t vccstate = SSD1306_SWITCHCAPVCC, uint8_t i2caddr = SSD1306_I2C_ADDRESS) 
.................... { 
....................   _vccstate = vccstate; 
0310:  MOVFF  43C,05
....................   _i2caddr  = i2caddr; 
0314:  MOVFF  43D,04
....................   delay_ms(10); 
0318:  MOVLW  0A
031A:  MOVLB  4
031C:  MOVWF  x3E
031E:  MOVLB  0
0320:  RCALL  0256
....................  
....................   #ifdef SSD1306_RST 
....................     output_low(SSD1306_RST); 
....................     output_drive(SSD1306_RST); 
....................     delay_ms(10); 
....................     output_high(SSD1306_RST); 
....................   #endif 
....................    
....................   // Init sequence 
....................   ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE 
0322:  MOVLW  AE
0324:  MOVLB  4
0326:  MOVWF  x3F
0328:  MOVLB  0
032A:  RCALL  02D0
....................   ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5 
032C:  MOVLW  D5
032E:  MOVLB  4
0330:  MOVWF  x3F
0332:  MOVLB  0
0334:  RCALL  02D0
....................   ssd1306_command(0x80);                                  // the suggested ratio 0x80 
0336:  MOVLW  80
0338:  MOVLB  4
033A:  MOVWF  x3F
033C:  MOVLB  0
033E:  RCALL  02D0
....................  
....................   ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8 
0340:  MOVLW  A8
0342:  MOVLB  4
0344:  MOVWF  x3F
0346:  MOVLB  0
0348:  RCALL  02D0
....................   ssd1306_command(SSD1306_LCDHEIGHT - 1); 
034A:  MOVLW  3F
034C:  MOVLB  4
034E:  MOVWF  x3F
0350:  MOVLB  0
0352:  RCALL  02D0
....................  
....................   ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3 
0354:  MOVLW  D3
0356:  MOVLB  4
0358:  MOVWF  x3F
035A:  MOVLB  0
035C:  RCALL  02D0
....................   ssd1306_command(0x0);                                   // no offset 
035E:  MOVLB  4
0360:  CLRF   x3F
0362:  MOVLB  0
0364:  RCALL  02D0
....................   ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0 
0366:  MOVLW  40
0368:  MOVLB  4
036A:  MOVWF  x3F
036C:  MOVLB  0
036E:  RCALL  02D0
....................   ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D 
0370:  MOVLW  8D
0372:  MOVLB  4
0374:  MOVWF  x3F
0376:  MOVLB  0
0378:  RCALL  02D0
....................   if (vccstate == SSD1306_EXTERNALVCC) 
037A:  MOVLB  4
037C:  DECFSZ x3C,W
037E:  BRA    038C
....................     { ssd1306_command(0x10); } 
0380:  MOVLW  10
0382:  MOVWF  x3F
0384:  MOVLB  0
0386:  RCALL  02D0
0388:  BRA    0394
038A:  MOVLB  4
....................   else 
....................     { ssd1306_command(0x14); } 
038C:  MOVLW  14
038E:  MOVWF  x3F
0390:  MOVLB  0
0392:  RCALL  02D0
....................   ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20 
0394:  MOVLW  20
0396:  MOVLB  4
0398:  MOVWF  x3F
039A:  MOVLB  0
039C:  RCALL  02D0
....................   ssd1306_command(0x00);                                  // 0x0 act like ks0108 
039E:  MOVLB  4
03A0:  CLRF   x3F
03A2:  MOVLB  0
03A4:  RCALL  02D0
....................   ssd1306_command(SSD1306_SEGREMAP | 0x1); 
03A6:  MOVLW  A1
03A8:  MOVLB  4
03AA:  MOVWF  x3F
03AC:  MOVLB  0
03AE:  RCALL  02D0
....................   ssd1306_command(SSD1306_COMSCANDEC); 
03B0:  MOVLW  C8
03B2:  MOVLB  4
03B4:  MOVWF  x3F
03B6:  MOVLB  0
03B8:  RCALL  02D0
....................  
....................  #if defined SSD1306_128_32 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................   ssd1306_command(0x02); 
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................   ssd1306_command(0x8F); 
....................  
.................... #elif defined SSD1306_128_64 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
03BA:  MOVLW  DA
03BC:  MOVLB  4
03BE:  MOVWF  x3F
03C0:  MOVLB  0
03C2:  RCALL  02D0
....................   ssd1306_command(0x12); 
03C4:  MOVLW  12
03C6:  MOVLB  4
03C8:  MOVWF  x3F
03CA:  MOVLB  0
03CC:  RCALL  02D0
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
03CE:  MOVLW  81
03D0:  MOVLB  4
03D2:  MOVWF  x3F
03D4:  MOVLB  0
03D6:  RCALL  02D0
....................   if (vccstate == SSD1306_EXTERNALVCC) 
03D8:  MOVLB  4
03DA:  DECFSZ x3C,W
03DC:  BRA    03EA
....................     { ssd1306_command(0x9F); } 
03DE:  MOVLW  9F
03E0:  MOVWF  x3F
03E2:  MOVLB  0
03E4:  RCALL  02D0
03E6:  BRA    03F2
03E8:  MOVLB  4
....................   else 
....................     { ssd1306_command(0xCF); } 
03EA:  MOVLW  CF
03EC:  MOVWF  x3F
03EE:  MOVLB  0
03F0:  RCALL  02D0
....................  
.................... #elif defined SSD1306_96_16 
....................   ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA 
....................   ssd1306_command(0x2);   //ada x12 
....................   ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81 
....................   if (vccstate == SSD1306_EXTERNALVCC) 
....................     { ssd1306_command(0x10); } 
....................   else 
....................     { ssd1306_command(0xAF); } 
....................  
.................... #endif 
....................  
....................   ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9 
03F2:  MOVLW  D9
03F4:  MOVLB  4
03F6:  MOVWF  x3F
03F8:  MOVLB  0
03FA:  RCALL  02D0
....................   if (vccstate == SSD1306_EXTERNALVCC) 
03FC:  MOVLB  4
03FE:  DECFSZ x3C,W
0400:  BRA    040E
....................     { ssd1306_command(0x22); } 
0402:  MOVLW  22
0404:  MOVWF  x3F
0406:  MOVLB  0
0408:  RCALL  02D0
040A:  BRA    0416
040C:  MOVLB  4
....................   else 
....................     { ssd1306_command(0xF1); } 
040E:  MOVLW  F1
0410:  MOVWF  x3F
0412:  MOVLB  0
0414:  RCALL  02D0
....................   ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB 
0416:  MOVLW  DB
0418:  MOVLB  4
041A:  MOVWF  x3F
041C:  MOVLB  0
041E:  RCALL  02D0
....................   ssd1306_command(0x40); 
0420:  MOVLW  40
0422:  MOVLB  4
0424:  MOVWF  x3F
0426:  MOVLB  0
0428:  RCALL  02D0
....................   ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4 
042A:  MOVLW  A4
042C:  MOVLB  4
042E:  MOVWF  x3F
0430:  MOVLB  0
0432:  RCALL  02D0
....................   ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6 
0434:  MOVLW  A6
0436:  MOVLB  4
0438:  MOVWF  x3F
043A:  MOVLB  0
043C:  RCALL  02D0
....................  
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
043E:  MOVLW  2E
0440:  MOVLB  4
0442:  MOVWF  x3F
0444:  MOVLB  0
0446:  RCALL  02D0
....................  
....................   ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel 
0448:  MOVLW  AF
044A:  MOVLB  4
044C:  MOVWF  x3F
044E:  MOVLB  0
0450:  RCALL  02D0
....................    
....................   // set cursor to (0, 0) 
....................   x_pos = 0; 
0452:  CLRF   06
....................   y_pos = 0; 
0454:  CLRF   07
....................   // set text size to 1 
....................   text_size = 1; 
0456:  MOVLW  01
0458:  MOVWF  08
045A:  GOTO   1766 (RETURN)
.................... } 
....................  
.................... void SSD1306_DrawPixel(uint8_t x, uint8_t y, int1 color = TRUE) 
.................... { 
....................   if ((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT)) 
*
0576:  MOVLB  4
0578:  MOVF   x6F,W
057A:  SUBLW  7F
057C:  BNC   0584
057E:  MOVF   x70,W
0580:  SUBLW  3F
0582:  BC    0586
....................     return; 
0584:  BRA    0662
....................   if (color) 
0586:  MOVF   x71,F
0588:  BZ    05F6
....................     ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7)); 
058A:  RRCF   x70,W
058C:  MOVWF  00
058E:  RRCF   00,F
0590:  RRCF   00,F
0592:  MOVLW  1F
0594:  ANDWF  00,F
0596:  MOVF   00,W
0598:  CLRF   x73
059A:  MOVWF  x72
059C:  RLCF   x72,W
059E:  MOVWF  02
05A0:  RLCF   x73,W
05A2:  MOVWF  03
05A4:  RLCF   02,F
05A6:  RLCF   03,F
05A8:  RLCF   02,F
05AA:  RLCF   03,F
05AC:  RLCF   02,F
05AE:  RLCF   03,F
05B0:  RLCF   02,F
05B2:  RLCF   03,F
05B4:  RLCF   02,F
05B6:  RLCF   03,F
05B8:  RLCF   02,F
05BA:  RLCF   03,F
05BC:  MOVLW  80
05BE:  ANDWF  02,F
05C0:  MOVF   02,W
05C2:  ADDWF  x6F,W
05C4:  MOVWF  x72
05C6:  MOVLW  00
05C8:  ADDWFC 03,W
05CA:  MOVWF  x73
05CC:  MOVLW  0A
05CE:  ADDWF  x72,W
05D0:  MOVWF  FE9
05D2:  MOVLW  00
05D4:  ADDWFC x73,W
05D6:  MOVWF  FEA
05D8:  MOVF   x70,W
05DA:  ANDLW  07
05DC:  MOVWF  01
05DE:  MOVLW  01
05E0:  MOVWF  00
05E2:  MOVF   01,F
05E4:  BZ    05EE
05E6:  BCF    FD8.0
05E8:  RLCF   00,F
05EA:  DECFSZ 01,F
05EC:  BRA    05E6
05EE:  MOVF   00,W
05F0:  IORWF  FEF,W
05F2:  MOVWF  FEF
05F4:  BRA    0662
....................   else 
....................     ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] &=  ~(1 << (y & 7)); 
05F6:  RRCF   x70,W
05F8:  MOVWF  00
05FA:  RRCF   00,F
05FC:  RRCF   00,F
05FE:  MOVLW  1F
0600:  ANDWF  00,F
0602:  MOVF   00,W
0604:  CLRF   x73
0606:  MOVWF  x72
0608:  RLCF   x72,W
060A:  MOVWF  02
060C:  RLCF   x73,W
060E:  MOVWF  03
0610:  RLCF   02,F
0612:  RLCF   03,F
0614:  RLCF   02,F
0616:  RLCF   03,F
0618:  RLCF   02,F
061A:  RLCF   03,F
061C:  RLCF   02,F
061E:  RLCF   03,F
0620:  RLCF   02,F
0622:  RLCF   03,F
0624:  RLCF   02,F
0626:  RLCF   03,F
0628:  MOVLW  80
062A:  ANDWF  02,F
062C:  MOVF   02,W
062E:  ADDWF  x6F,W
0630:  MOVWF  x72
0632:  MOVLW  00
0634:  ADDWFC 03,W
0636:  MOVWF  x73
0638:  MOVLW  0A
063A:  ADDWF  x72,W
063C:  MOVWF  FE9
063E:  MOVLW  00
0640:  ADDWFC x73,W
0642:  MOVWF  FEA
0644:  MOVF   x70,W
0646:  ANDLW  07
0648:  MOVWF  01
064A:  MOVLW  01
064C:  MOVWF  00
064E:  MOVF   01,F
0650:  BZ    065A
0652:  BCF    FD8.0
0654:  RLCF   00,F
0656:  DECFSZ 01,F
0658:  BRA    0652
065A:  MOVF   00,W
065C:  XORLW  FF
065E:  ANDWF  FEF,W
0660:  MOVWF  FEF
0662:  MOVLB  0
0664:  RETURN 0
.................... } 
....................  
.................... void SSD1306_StartScrollRight(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(0XFF); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollDiagRight(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StartScrollDiagLeft(uint8_t start, uint8_t stop) 
.................... { 
....................   ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(SSD1306_LCDHEIGHT); 
....................   ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(start); 
....................   ssd1306_command(0X00); 
....................   ssd1306_command(stop); 
....................   ssd1306_command(0X01); 
....................   ssd1306_command(SSD1306_ACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_StopScroll(void) 
.................... { 
....................   ssd1306_command(SSD1306_DEACTIVATE_SCROLL); 
.................... } 
....................  
.................... void SSD1306_Dim(int1 dim) 
.................... { 
....................   uint8_t contrast; 
....................   if (dim) 
....................     contrast = 0; // Dimmed display 
....................   else { 
....................     if (_vccstate == SSD1306_EXTERNALVCC) 
....................       contrast = 0x9F; 
....................     else 
....................       contrast = 0xCF; 
....................   } 
....................   // the range of contrast to too small to be really useful 
....................   // it is useful to dim the display 
....................   ssd1306_command(SSD1306_SETCONTRAST); 
....................   ssd1306_command(contrast); 
.................... } 
....................  
.................... void SSD1306_Display(void) 
.................... { 
....................   ssd1306_command(SSD1306_COLUMNADDR); 
*
0486:  MOVLW  21
0488:  MOVLB  4
048A:  MOVWF  x3F
048C:  MOVLB  0
048E:  RCALL  02D0
....................   ssd1306_command(0);   // Column start address (0 = reset) 
0490:  MOVLB  4
0492:  CLRF   x3F
0494:  MOVLB  0
0496:  RCALL  02D0
....................   ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset) 
0498:  MOVLW  7F
049A:  MOVLB  4
049C:  MOVWF  x3F
049E:  MOVLB  0
04A0:  RCALL  02D0
....................  
....................   ssd1306_command(SSD1306_PAGEADDR); 
04A2:  MOVLW  22
04A4:  MOVLB  4
04A6:  MOVWF  x3F
04A8:  MOVLB  0
04AA:  RCALL  02D0
....................   ssd1306_command(0); // Page start address (0 = reset) 
04AC:  MOVLB  4
04AE:  CLRF   x3F
04B0:  MOVLB  0
04B2:  RCALL  02D0
....................   #if SSD1306_LCDHEIGHT == 64 
....................     ssd1306_command(7); // Page end address 
04B4:  MOVLW  07
04B6:  MOVLB  4
04B8:  MOVWF  x3F
04BA:  MOVLB  0
04BC:  RCALL  02D0
....................   #endif 
....................   #if SSD1306_LCDHEIGHT == 32 
....................     ssd1306_command(3); // Page end address 
....................   #endif 
....................   #if SSD1306_LCDHEIGHT == 16 
....................     ssd1306_command(1); // Page end address 
....................   #endif 
....................    
....................   for (uint16_t i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++) { 
04BE:  MOVLB  4
04C0:  CLRF   x3D
04C2:  CLRF   x3C
04C4:  MOVF   x3D,W
04C6:  SUBLW  03
04C8:  BNC   0540
....................       // send a bunch of data in one xmission 
....................       I2C_Start(SSD1306_STREAM); 
04CA:  BSF    F93.0
04CC:  NOP   
04CE:  BSF    F93.1
04D0:  NOP   
04D2:  BCF    F8A.0
04D4:  BCF    F93.0
04D6:  NOP   
04D8:  BCF    F8A.1
04DA:  BCF    F93.1
....................       I2C_Write(SSD1306_STREAM, _i2caddr); 
04DC:  MOVFF  04,441
04E0:  MOVLB  0
04E2:  RCALL  027E
....................       I2C_Write(SSD1306_STREAM, 0x40); 
04E4:  MOVLW  40
04E6:  MOVLB  4
04E8:  MOVWF  x41
04EA:  MOVLB  0
04EC:  RCALL  027E
....................       for (uint8_t x = 0; x < 16; x++) { 
04EE:  MOVLB  4
04F0:  CLRF   x3E
04F2:  MOVF   x3E,W
04F4:  SUBLW  0F
04F6:  BNC   051C
....................         I2C_Write(SSD1306_STREAM, ssd1306_buffer[i]); 
04F8:  MOVLW  0A
04FA:  ADDWF  x3C,W
04FC:  MOVWF  FE9
04FE:  MOVLW  00
0500:  ADDWFC x3D,W
0502:  MOVWF  FEA
0504:  MOVFF  FEF,43F
0508:  MOVFF  43F,441
050C:  MOVLB  0
050E:  RCALL  027E
....................         i++; 
0510:  MOVLB  4
0512:  INCF   x3C,F
0514:  BTFSC  FD8.2
0516:  INCF   x3D,F
0518:  INCF   x3E,F
051A:  BRA    04F2
....................       } 
....................       i--; 
051C:  MOVF   x3C,W
051E:  BTFSC  FD8.2
0520:  DECF   x3D,F
0522:  DECF   x3C,F
....................       I2C_Stop(SSD1306_STREAM); 
0524:  BCF    F93.0
0526:  NOP   
0528:  BSF    F93.1
052A:  BTFSS  F81.1
052C:  BRA    052A
052E:  NOP   
0530:  BRA    0532
0532:  NOP   
0534:  BSF    F93.0
0536:  NOP   
0538:  INCF   x3C,F
053A:  BTFSC  FD8.2
053C:  INCF   x3D,F
053E:  BRA    04C4
....................     } 
0540:  MOVLB  0
0542:  RETURN 0
.................... } 
....................  
.................... void SSD1306_ClearDisplay(void) 
.................... { 
....................   for (uint16_t i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++) 
*
045E:  MOVLB  4
0460:  CLRF   x3D
0462:  CLRF   x3C
0464:  MOVF   x3D,W
0466:  SUBLW  03
0468:  BNC   0480
....................     ssd1306_buffer[i] = 0; 
046A:  MOVLW  0A
046C:  ADDWF  x3C,W
046E:  MOVWF  FE9
0470:  MOVLW  00
0472:  ADDWFC x3D,W
0474:  MOVWF  FEA
0476:  CLRF   FEF
0478:  INCF   x3C,F
047A:  BTFSC  FD8.2
047C:  INCF   x3D,F
047E:  BRA    0464
0480:  MOVLB  0
0482:  GOTO   176A (RETURN)
.................... } 
....................  
.................... void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int1 color = TRUE) 
.................... { 
....................   int1 steep; 
....................   int8_t ystep; 
....................   uint8_t dx, dy; 
....................   int16_t err; 
....................   steep = abs(y1 - y0) > abs(x1 - x0); 
*
0666:  MOVLB  4
0668:  BCF    x61.0
066A:  MOVF   x5A,W
066C:  SUBWF  x5E,W
066E:  MOVWF  x6F
0670:  MOVF   x5B,W
0672:  SUBWFB x5F,W
0674:  MOVWF  x70
0676:  MOVWF  03
0678:  MOVF   x6F,W
067A:  BTFSS  x70.7
067C:  BRA    068E
067E:  MOVLW  00
0680:  BSF    FD8.0
0682:  SUBFWB x6F,W
0684:  MOVWF  00
0686:  MOVLW  00
0688:  SUBFWB x70,W
068A:  MOVWF  03
068C:  MOVF   00,W
068E:  MOVWF  x6F
0690:  MOVFF  03,470
0694:  MOVF   x58,W
0696:  SUBWF  x5C,W
0698:  MOVWF  x71
069A:  MOVF   x59,W
069C:  SUBWFB x5D,W
069E:  MOVWF  x72
06A0:  MOVWF  03
06A2:  MOVF   x71,W
06A4:  BTFSS  x72.7
06A6:  BRA    06B8
06A8:  MOVLW  00
06AA:  BSF    FD8.0
06AC:  SUBFWB x71,W
06AE:  MOVWF  00
06B0:  MOVLW  00
06B2:  SUBFWB x72,W
06B4:  MOVWF  03
06B6:  MOVF   00,W
06B8:  MOVWF  01
06BA:  BTFSS  03.7
06BC:  BRA    06C4
06BE:  BTFSS  x70.7
06C0:  BRA    06D6
06C2:  BRA    06C8
06C4:  BTFSC  x70.7
06C6:  BRA    06D8
06C8:  MOVF   03,W
06CA:  SUBWF  x70,W
06CC:  BNC   06D8
06CE:  BNZ   06D6
06D0:  MOVF   x6F,W
06D2:  SUBWF  01,W
06D4:  BC    06D8
06D6:  BSF    x61.0
....................   if (steep) { 
06D8:  BTFSS  x61.0
06DA:  BRA    070C
....................     ssd1306_swap(x0, y0); 
06DC:  MOVFF  459,468
06E0:  MOVFF  458,467
06E4:  MOVFF  45B,459
06E8:  MOVFF  45A,458
06EC:  MOVFF  468,45B
06F0:  MOVFF  467,45A
....................     ssd1306_swap(x1, y1); 
06F4:  MOVFF  45D,46A
06F8:  MOVFF  45C,469
06FC:  MOVFF  45F,45D
0700:  MOVFF  45E,45C
0704:  MOVFF  46A,45F
0708:  MOVFF  469,45E
....................   } 
....................   if (x0 > x1) { 
070C:  BTFSS  x5D.7
070E:  BRA    0716
0710:  BTFSS  x59.7
0712:  BRA    0728
0714:  BRA    071A
0716:  BTFSC  x59.7
0718:  BRA    0758
071A:  MOVF   x5D,W
071C:  SUBWF  x59,W
071E:  BNC   0758
0720:  BNZ   0728
0722:  MOVF   x58,W
0724:  SUBWF  x5C,W
0726:  BC    0758
....................     ssd1306_swap(x0, x1); 
0728:  MOVFF  459,46C
072C:  MOVFF  458,46B
0730:  MOVFF  45D,459
0734:  MOVFF  45C,458
0738:  MOVFF  46C,45D
073C:  MOVFF  46B,45C
....................     ssd1306_swap(y0, y1); 
0740:  MOVFF  45B,46E
0744:  MOVFF  45A,46D
0748:  MOVFF  45F,45B
074C:  MOVFF  45E,45A
0750:  MOVFF  46E,45F
0754:  MOVFF  46D,45E
....................   } 
....................   dx = x1 - x0; 
0758:  MOVF   x58,W
075A:  SUBWF  x5C,W
075C:  MOVWF  00
075E:  MOVF   x59,W
0760:  SUBWFB x5D,W
0762:  MOVFF  00,463
....................   dy = abs(y1 - y0); 
0766:  MOVF   x5A,W
0768:  SUBWF  x5E,W
076A:  MOVWF  x6F
076C:  MOVF   x5B,W
076E:  SUBWFB x5F,W
0770:  MOVWF  x70
0772:  MOVWF  03
0774:  MOVF   x6F,W
0776:  BTFSS  x70.7
0778:  BRA    078A
077A:  MOVLW  00
077C:  BSF    FD8.0
077E:  SUBFWB x6F,W
0780:  MOVWF  00
0782:  MOVLW  00
0784:  SUBFWB x70,W
0786:  MOVWF  03
0788:  MOVF   00,W
078A:  MOVWF  x64
....................  
....................   err = dx / 2; 
078C:  BCF    FD8.0
078E:  RRCF   x63,W
0790:  CLRF   03
0792:  MOVWF  x65
0794:  MOVFF  03,466
....................   if (y0 < y1) 
0798:  BTFSS  x5B.7
079A:  BRA    07A2
079C:  BTFSS  x5F.7
079E:  BRA    07B4
07A0:  BRA    07A6
07A2:  BTFSC  x5F.7
07A4:  BRA    07BA
07A6:  MOVF   x5B,W
07A8:  SUBWF  x5F,W
07AA:  BNC   07BA
07AC:  BNZ   07B4
07AE:  MOVF   x5E,W
07B0:  SUBWF  x5A,W
07B2:  BC    07BA
....................     ystep = 1; 
07B4:  MOVLW  01
07B6:  MOVWF  x62
07B8:  BRA    07BC
....................   else 
....................     ystep = -1; 
07BA:  SETF   x62
....................  
....................   for (; x0 <= x1; x0++) { 
07BC:  BTFSS  x59.7
07BE:  BRA    07C6
07C0:  BTFSS  x5D.7
07C2:  BRA    07D8
07C4:  BRA    07CA
07C6:  BTFSC  x5D.7
07C8:  BRA    0858
07CA:  MOVF   x59,W
07CC:  SUBWF  x5D,W
07CE:  BNC   0858
07D0:  BNZ   07D8
07D2:  MOVF   x58,W
07D4:  SUBWF  x5C,W
07D6:  BNC   0858
....................     if (steep) { 
07D8:  BTFSS  x61.0
07DA:  BRA    0806
....................       if(color) SSD1306_DrawPixel(y0, x0); 
07DC:  MOVF   x60,F
07DE:  BZ    07F4
07E0:  MOVFF  45A,46F
07E4:  MOVFF  458,470
07E8:  MOVLW  01
07EA:  MOVWF  x71
07EC:  MOVLB  0
07EE:  RCALL  0576
07F0:  BRA    0802
07F2:  MOVLB  4
....................       else      SSD1306_DrawPixel(y0, x0, FALSE); 
07F4:  MOVFF  45A,46F
07F8:  MOVFF  458,470
07FC:  CLRF   x71
07FE:  MOVLB  0
0800:  RCALL  0576
....................     } 
0802:  BRA    082C
0804:  MOVLB  4
....................     else { 
....................       if(color) SSD1306_DrawPixel(x0, y0); 
0806:  MOVF   x60,F
0808:  BZ    081E
080A:  MOVFF  458,46F
080E:  MOVFF  45A,470
0812:  MOVLW  01
0814:  MOVWF  x71
0816:  MOVLB  0
0818:  RCALL  0576
081A:  BRA    082C
081C:  MOVLB  4
....................       else      SSD1306_DrawPixel(x0, y0, FALSE); 
081E:  MOVFF  458,46F
0822:  MOVFF  45A,470
0826:  CLRF   x71
0828:  MOVLB  0
082A:  RCALL  0576
....................     } 
....................     err -= dy; 
082C:  MOVLB  4
082E:  MOVF   x64,W
0830:  SUBWF  x65,F
0832:  MOVLW  00
0834:  SUBWFB x66,F
....................     if (err < 0) { 
0836:  BTFSS  x66.7
0838:  BRA    0850
....................       y0  += ystep; 
083A:  CLRF   03
083C:  MOVF   x62,W
083E:  BTFSC  FE8.7
0840:  DECF   03,F
0842:  ADDWF  x5A,F
0844:  MOVF   03,W
0846:  ADDWFC x5B,F
....................       err += dx; 
0848:  MOVF   x63,W
084A:  ADDWF  x65,F
084C:  MOVLW  00
084E:  ADDWFC x66,F
....................     } 
0850:  INCF   x58,F
0852:  BTFSC  FD8.2
0854:  INCF   x59,F
0856:  BRA    07BC
....................   } 
0858:  MOVLB  0
085A:  RETURN 0
.................... } 
....................  
.................... void SSD1306_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, int1 color = TRUE) 
.................... { 
....................    SSD1306_DrawLine(x, y, x + w - 1, y, color); 
*
0AC2:  MOVLB  4
0AC4:  MOVF   x43,W
0AC6:  ADDWF  x41,W
0AC8:  ADDLW  FF
0ACA:  MOVWF  x45
0ACC:  CLRF   x59
0ACE:  MOVFF  441,458
0AD2:  CLRF   x5B
0AD4:  MOVFF  442,45A
0AD8:  CLRF   x5D
0ADA:  MOVWF  x5C
0ADC:  CLRF   x5F
0ADE:  MOVFF  442,45E
0AE2:  MOVFF  444,460
0AE6:  MOVLB  0
0AE8:  RCALL  0666
0AEA:  RETURN 0
.................... } 
....................  
.................... void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, int1 color = TRUE) 
.................... { 
....................   SSD1306_DrawLine(x, y, x, y + h - 1, color); 
*
085C:  MOVLB  4
085E:  MOVF   x55,W
0860:  ADDWF  x54,W
0862:  ADDLW  FF
0864:  MOVWF  x57
0866:  CLRF   x59
0868:  MOVFF  453,458
086C:  CLRF   x5B
086E:  MOVFF  454,45A
0872:  CLRF   x5D
0874:  MOVFF  453,45C
0878:  CLRF   x5F
087A:  MOVWF  x5E
087C:  MOVFF  456,460
0880:  MOVLB  0
0882:  RCALL  0666
0884:  RETURN 0
.................... } 
....................  
.................... void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, int1 color = TRUE) 
.................... { 
....................   for (int16_t i = x; i < x + w; i++) 
0886:  CLRF   03
0888:  MOVLB  4
088A:  MOVFF  44C,451
088E:  MOVFF  03,452
0892:  MOVF   x4E,W
0894:  ADDWF  x4C,W
0896:  BTFSC  x52.7
0898:  BRA    08A2
089A:  MOVF   x52,F
089C:  BNZ   08C0
089E:  SUBWF  x51,W
08A0:  BC    08C0
....................     SSD1306_DrawFastVLine(i, y, h, color); 
08A2:  MOVFF  451,453
08A6:  MOVFF  44D,454
08AA:  MOVFF  44F,455
08AE:  MOVFF  450,456
08B2:  MOVLB  0
08B4:  RCALL  085C
08B6:  MOVLB  4
08B8:  INCF   x51,F
08BA:  BTFSC  FD8.2
08BC:  INCF   x52,F
08BE:  BRA    0892
08C0:  MOVLB  0
08C2:  RETURN 0
.................... } 
....................  
.................... void SSD1306_FillScreen(int1 color = TRUE) { 
....................   SSD1306_FillRect(0, 0, SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT, color); 
.................... } 
....................  
.................... void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r) 
.................... { 
....................   int16_t f = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x = 0; 
....................   int16_t y = r; 
....................  
....................   SSD1306_DrawPixel(x0  , y0 + r); 
....................   SSD1306_DrawPixel(x0  , y0 - r); 
....................   SSD1306_DrawPixel(x0 + r, y0); 
....................   SSD1306_DrawPixel(x0 - r, y0); 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f += ddF_x; 
....................  
....................     SSD1306_DrawPixel(x0 + x, y0 + y); 
....................     SSD1306_DrawPixel(x0 - x, y0 + y); 
....................     SSD1306_DrawPixel(x0 + x, y0 - y); 
....................     SSD1306_DrawPixel(x0 - x, y0 - y); 
....................     SSD1306_DrawPixel(x0 + y, y0 + x); 
....................     SSD1306_DrawPixel(x0 - y, y0 + x); 
....................     SSD1306_DrawPixel(x0 + y, y0 - x); 
....................     SSD1306_DrawPixel(x0 - y, y0 - x); 
....................   } 
....................  
.................... } 
....................  
.................... void SSD1306_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername) 
.................... { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................     if (cornername & 0x4) { 
....................       SSD1306_DrawPixel(x0 + x, y0 + y); 
....................       SSD1306_DrawPixel(x0 + y, y0 + x); 
....................     } 
....................     if (cornername & 0x2) { 
....................       SSD1306_DrawPixel(x0 + x, y0 - y); 
....................       SSD1306_DrawPixel(x0 + y, y0 - x); 
....................     } 
....................     if (cornername & 0x8) { 
....................       SSD1306_DrawPixel(x0 - y, y0 + x); 
....................       SSD1306_DrawPixel(x0 - x, y0 + y); 
....................     } 
....................     if (cornername & 0x1) { 
....................       SSD1306_DrawPixel(x0 - y, y0 - x); 
....................       SSD1306_DrawPixel(x0 - x, y0 - y); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... void SSD1306_FillCircle(int16_t x0, int16_t y0, int16_t r, int1 color = TRUE) 
.................... { 
....................   SSD1306_DrawFastVLine(x0, y0 - r, 2 * r + 1, color); 
....................   SSD1306_FillCircleHelper(x0, y0, r, 3, 0, color); 
.................... } 
....................  
.................... // Used to do circles and roundrects 
.................... void SSD1306_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, int1 color = TRUE) { 
....................   int16_t f     = 1 - r; 
....................   int16_t ddF_x = 1; 
....................   int16_t ddF_y = -2 * r; 
....................   int16_t x     = 0; 
....................   int16_t y     = r; 
....................  
....................   while (x < y) { 
....................     if (f >= 0) { 
....................       y--; 
....................       ddF_y += 2; 
....................       f     += ddF_y; 
....................     } 
....................     x++; 
....................     ddF_x += 2; 
....................     f     += ddF_x; 
....................  
....................     if (cornername & 0x01) { 
....................       SSD1306_DrawFastVLine(x0 + x, y0 - y, 2 * y + 1 + delta, color); 
....................       SSD1306_DrawFastVLine(x0 + y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................     if (cornername & 0x02) { 
....................       SSD1306_DrawFastVLine(x0 - x, y0 - y, 2 * y + 1 + delta, color); 
....................       SSD1306_DrawFastVLine(x0 - y, y0 - x, 2 * x + 1 + delta, color); 
....................     } 
....................   } 
....................  
.................... } 
....................  
.................... // Draw a rectangle 
.................... void SSD1306_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h) 
.................... { 
....................   SSD1306_DrawFastHLine(x, y, w); 
*
0AEC:  MOVFF  43C,441
0AF0:  MOVFF  43D,442
0AF4:  MOVFF  43E,443
0AF8:  MOVLW  01
0AFA:  MOVLB  4
0AFC:  MOVWF  x44
0AFE:  MOVLB  0
0B00:  RCALL  0AC2
....................   SSD1306_DrawFastHLine(x, y + h - 1, w); 
0B02:  MOVLB  4
0B04:  MOVF   x3F,W
0B06:  ADDWF  x3D,W
0B08:  ADDLW  FF
0B0A:  MOVWF  x40
0B0C:  MOVFF  43C,441
0B10:  MOVWF  x42
0B12:  MOVFF  43E,443
0B16:  MOVLW  01
0B18:  MOVWF  x44
0B1A:  MOVLB  0
0B1C:  RCALL  0AC2
....................   SSD1306_DrawFastVLine(x, y, h); 
0B1E:  MOVFF  43C,453
0B22:  MOVFF  43D,454
0B26:  MOVFF  43F,455
0B2A:  MOVLW  01
0B2C:  MOVLB  4
0B2E:  MOVWF  x56
0B30:  MOVLB  0
0B32:  RCALL  085C
....................   SSD1306_DrawFastVLine(x + w - 1, y, h); 
0B34:  MOVLB  4
0B36:  MOVF   x3E,W
0B38:  ADDWF  x3C,W
0B3A:  ADDLW  FF
0B3C:  MOVWF  x40
0B3E:  MOVWF  x53
0B40:  MOVFF  43D,454
0B44:  MOVFF  43F,455
0B48:  MOVLW  01
0B4A:  MOVWF  x56
0B4C:  MOVLB  0
0B4E:  RCALL  085C
0B50:  GOTO   17CC (RETURN)
.................... } 
....................  
.................... // Draw a rounded rectangle 
.................... void SSD1306_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r) 
.................... { 
....................   // smarter version 
....................   SSD1306_DrawFastHLine(x + r, y, w - 2 * r); // Top 
....................   SSD1306_DrawFastHLine(x + r, y + h - 1, w - 2 * r); // Bottom 
....................   SSD1306_DrawFastVLine(x, y + r, h - 2 * r); // Left 
....................   SSD1306_DrawFastVLine(x + w - 1, y + r, h - 2 * r); // Right 
....................   // draw four corners 
....................   SSD1306_DrawCircleHelper(x + r, y + r, r, 1); 
....................   SSD1306_DrawCircleHelper(x + w - r - 1, y + r, r, 2); 
....................   SSD1306_DrawCircleHelper(x + w - r - 1, y + h - r - 1, r, 4); 
....................   SSD1306_DrawCircleHelper(x + r, y + h - r - 1, r, 8); 
.................... } 
....................  
.................... // Fill a rounded rectangle 
.................... void SSD1306_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, int1 color = TRUE) 
.................... { 
....................   // smarter version 
....................   SSD1306_FillRect(x + r, y, w - 2 * r, h, color); 
....................   // draw four corners 
....................   SSD1306_FillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color); 
....................   SSD1306_FillCircleHelper(x + r        , y + r, r, 2, h - 2 * r - 1, color); 
.................... } 
....................  
.................... // Draw a triangle 
.................... void SSD1306_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) 
.................... { 
....................   SSD1306_DrawLine(x0, y0, x1, y1); 
....................   SSD1306_DrawLine(x1, y1, x2, y2); 
....................   SSD1306_DrawLine(x2, y2, x0, y0); 
.................... } 
....................  
.................... // Fill a triangle 
.................... void SSD1306_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, int1 color = TRUE) 
.................... { 
....................   int16_t a, b, y, last; 
....................   // Sort coordinates by Y order (y2 >= y1 >= y0) 
....................   if (y0 > y1) { 
....................     ssd1306_swap(y0, y1); ssd1306_swap(x0, x1); 
....................   } 
....................   if (y1 > y2) { 
....................     ssd1306_swap(y2, y1); ssd1306_swap(x2, x1); 
....................   } 
....................   if (y0 > y1) { 
....................     ssd1306_swap(y0, y1); ssd1306_swap(x0, x1); 
....................   } 
....................  
....................   if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing 
....................     a = b = x0; 
....................     if(x1 < a)      a = x1; 
....................     else if(x1 > b) b = x1; 
....................     if(x2 < a)      a = x2; 
....................     else if(x2 > b) b = x2; 
....................     SSD1306_DrawFastHLine(a, y0, b - a + 1, color); 
....................     return; 
....................   } 
....................  
....................   int16_t 
....................   dx01 = x1 - x0, 
....................   dy01 = y1 - y0, 
....................   dx02 = x2 - x0, 
....................   dy02 = y2 - y0, 
....................   dx12 = x2 - x1, 
....................   dy12 = y2 - y1; 
....................   int32_t  sa   = 0, sb   = 0; 
....................  
....................   // For upper part of triangle, find scanline crossings for segments 
....................   // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1 
....................   // is included here (and second loop will be skipped, avoiding a /0 
....................   // error there), otherwise scanline y1 is skipped here and handled 
....................   // in the second loop...which also avoids a /0 error here if y0=y1 
....................   // (flat-topped triangle). 
....................   if(y1 == y2) last = y1;   // Include y1 scanline 
....................   else         last = y1 - 1; // Skip it 
....................  
....................   for(y = y0; y <= last; y++) { 
....................     a   = x0 + sa / dy01; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx01; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x0 + (x1 - x0) * (y - y0) / (y1 - y0); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) ssd1306_swap(a, b); 
....................     SSD1306_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
....................  
....................   // For lower part of triangle, find scanline crossings for segments 
....................   // 0-2 and 1-2.  This loop is skipped if y1=y2. 
....................   sa = dx12 * (y - y1); 
....................   sb = dx02 * (y - y0); 
....................   for(; y <= y2; y++) { 
....................     a   = x1 + sa / dy12; 
....................     b   = x0 + sb / dy02; 
....................     sa += dx12; 
....................     sb += dx02; 
....................     /* longhand: 
....................     a = x1 + (x2 - x1) * (y - y1) / (y2 - y1); 
....................     b = x0 + (x2 - x0) * (y - y0) / (y2 - y0); 
....................     */ 
....................     if(a > b) ssd1306_swap(a, b); 
....................     SSD1306_DrawFastHLine(a, y, b - a + 1, color); 
....................   } 
.................... } 
....................  
.................... // invert the display 
.................... void SSD1306_InvertDisplay(int1 i) 
.................... { 
....................   if (i) 
....................     ssd1306_command(SSD1306_INVERTDISPLAY_); 
....................   else 
....................     ssd1306_command(SSD1306_NORMALDISPLAY); 
.................... } 
....................  
.................... void SSD1306_SetTextWrap(int1 w) 
.................... { 
....................   wrap = w; 
.................... } 
....................  
.................... void SSD1306_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size = 1) 
.................... { 
....................   SSD1306_GotoXY(x, y); 
....................   SSD1306_TextSize(size); 
....................   SSD1306_Print(c); 
.................... } 
....................  
.................... void SSD1306_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size = 1) 
.................... { 
....................   SSD1306_GotoXY(x, y); 
*
0A78:  MOVFF  43E,443
0A7C:  MOVFF  43F,444
0A80:  BRA    0544
....................   SSD1306_TextSize(size); 
0A82:  MOVFF  442,443
0A86:  BRA    0562
....................   while(*_text != '\0') 
0A88:  MOVFF  441,03
0A8C:  MOVLB  4
0A8E:  MOVFF  440,FE9
0A92:  MOVFF  441,FEA
0A96:  MOVF   FEF,F
0A98:  BZ    0ABE
....................     SSD1306_Print(*_text++); 
0A9A:  MOVFF  441,03
0A9E:  MOVF   x40,W
0AA0:  INCF   x40,F
0AA2:  BTFSC  FD8.2
0AA4:  INCF   x41,F
0AA6:  MOVWF  FE9
0AA8:  MOVFF  03,FEA
0AAC:  MOVFF  FEF,443
0AB0:  MOVFF  443,444
0AB4:  MOVLB  0
0AB6:  BRA    08C4
0AB8:  MOVLB  0
0ABA:  BRA    0A88
0ABC:  MOVLB  4
0ABE:  MOVLB  0
0AC0:  RETURN 0
....................  
.................... } 
....................  
.................... // move cursor to position (x, y) 
.................... void SSD1306_GotoXY(uint8_t x, uint8_t y) 
.................... { 
....................   if((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT)) 
*
0544:  MOVLB  4
0546:  MOVF   x43,W
0548:  SUBLW  7F
054A:  BNC   0552
054C:  MOVF   x44,W
054E:  SUBLW  3F
0550:  BC    0554
....................     return; 
0552:  BRA    055C
....................   x_pos = x; 
0554:  MOVFF  443,06
....................   y_pos = y; 
0558:  MOVFF  444,07
055C:  MOVLB  0
055E:  GOTO   0A82 (RETURN)
.................... } 
....................  
.................... // set text size 
.................... void SSD1306_TextSize(uint8_t t_size) 
.................... { 
....................   if(t_size < 1) 
0562:  MOVLB  4
0564:  MOVF   x43,F
0566:  BNZ   056C
....................     t_size = 1; 
0568:  MOVLW  01
056A:  MOVWF  x43
....................   text_size = t_size; 
056C:  MOVFF  443,08
0570:  MOVLB  0
0572:  GOTO   0A88 (RETURN)
.................... } 
....................  
.................... /* print single char 
....................     \a  Set cursor position to upper left (0, 0) 
....................     \b  Move back one position 
....................     \n  Go to start of current line 
....................     \r  Go to line below 
.................... */ 
.................... void SSD1306_Print(uint8_t c) 
.................... { 
....................   int1 _color; 
....................   uint8_t i, j, line; 
....................    
....................   if (c == ' ' && x_pos == 0 && wrap) 
*
08C4:  MOVLB  4
08C6:  MOVF   x44,W
08C8:  SUBLW  20
08CA:  BNZ   08D6
08CC:  MOVF   06,F
08CE:  BNZ   08D6
08D0:  BTFSS  09.0
08D2:  BRA    08D6
....................     return; 
08D4:  BRA    0A72
....................   if(c == '\a') { 
08D6:  MOVF   x44,W
08D8:  SUBLW  07
08DA:  BNZ   08E4
....................     x_pos = y_pos = 0; 
08DC:  CLRF   07
08DE:  MOVFF  07,06
....................     return; 
08E2:  BRA    0A72
....................   } 
....................   if( (c == '\b') && (x_pos >= text_size * 6) ) { 
08E4:  MOVF   x44,W
08E6:  SUBLW  08
08E8:  BNZ   08FE
08EA:  MOVF   08,W
08EC:  MULLW  06
08EE:  MOVF   FF3,W
08F0:  SUBWF  06,W
08F2:  BNC   08FE
....................     x_pos -= text_size * 6; 
08F4:  MOVF   08,W
08F6:  MULLW  06
08F8:  MOVF   FF3,W
08FA:  SUBWF  06,F
....................     return; 
08FC:  BRA    0A72
....................   } 
....................   if(c == '\r') { 
08FE:  MOVF   x44,W
0900:  SUBLW  0D
0902:  BNZ   0908
....................     x_pos = 0; 
0904:  CLRF   06
....................     return; 
0906:  BRA    0A72
....................   } 
....................   if(c == '\n') { 
0908:  MOVF   x44,W
090A:  SUBLW  0A
090C:  BNZ   0926
....................     y_pos += text_size * 8; 
090E:  MOVF   08,W
0910:  MULLW  08
0912:  MOVF   FF3,W
0914:  ADDWF  07,F
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
0916:  MOVF   08,W
0918:  MULLW  07
091A:  MOVF   FF3,W
091C:  ADDWF  07,W
091E:  SUBLW  40
0920:  BC    0924
....................       y_pos = 0; 
0922:  CLRF   07
....................     return; 
0924:  BRA    0A72
....................   } 
....................  
....................   if((c < ' ') || (c > '~')) 
0926:  MOVF   x44,W
0928:  SUBLW  1F
092A:  BC    0932
092C:  MOVF   x44,W
092E:  SUBLW  7E
0930:  BC    0936
....................     c = '?'; 
0932:  MOVLW  3F
0934:  MOVWF  x44
....................    
....................   for(i = 0; i < 5; i++ ) { 
0936:  CLRF   x46
0938:  MOVF   x46,W
093A:  SUBLW  04
093C:  BNC   0A06
....................     if(c < 'S') 
093E:  MOVF   x44,W
0940:  SUBLW  52
0942:  BNC   0968
....................       line = font[(c - ' ') * 5 + i]; 
0944:  MOVLW  20
0946:  SUBWF  x44,W
0948:  MULLW  05
094A:  MOVF   FF3,W
094C:  ADDWF  x46,W
094E:  CLRF   03
0950:  MOVFF  FF2,449
0954:  BCF    FF2.7
0956:  MOVLB  0
0958:  CALL   0004
095C:  MOVLB  4
095E:  BTFSC  x49.7
0960:  BSF    FF2.7
0962:  MOVWF  01
0964:  MOVWF  x48
0966:  BRA    0988
....................     else 
....................       line = font2[(c - 'S') * 5 + i]; 
0968:  MOVLW  53
096A:  SUBWF  x44,W
096C:  MULLW  05
096E:  MOVF   FF3,W
0970:  ADDWF  x46,W
0972:  CLRF   03
0974:  MOVFF  FF2,449
0978:  BCF    FF2.7
097A:  MOVLB  0
097C:  CALL   0114
0980:  MOVLB  4
0982:  BTFSC  x49.7
0984:  BSF    FF2.7
0986:  MOVWF  x48
....................      
....................     for(j = 0; j < 7; j++, line >>= 1) { 
0988:  CLRF   x47
098A:  MOVF   x47,W
098C:  SUBLW  06
098E:  BNC   0A02
....................       if(line & 0x01) 
0990:  BTFSS  x48.0
0992:  BRA    0998
....................         _color = TRUE; 
0994:  BSF    x45.0
0996:  BRA    099A
....................       else 
....................         _color = FALSE; 
0998:  BCF    x45.0
....................       if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color); 
099A:  DECFSZ 08,W
099C:  BRA    09C4
099E:  MOVF   x46,W
09A0:  ADDWF  06,W
09A2:  MOVWF  x49
09A4:  MOVF   x47,W
09A6:  ADDWF  07,W
09A8:  MOVWF  x4A
09AA:  MOVLW  00
09AC:  BTFSC  x45.0
09AE:  MOVLW  01
09B0:  MOVWF  x4B
09B2:  MOVFF  449,46F
09B6:  MOVFF  44A,470
09BA:  MOVWF  x71
09BC:  MOVLB  0
09BE:  RCALL  0576
09C0:  BRA    09F6
09C2:  MOVLB  4
....................       else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
09C4:  MOVF   x46,W
09C6:  MULWF  08
09C8:  MOVF   FF3,W
09CA:  ADDWF  06,W
09CC:  MOVWF  x49
09CE:  MOVF   x47,W
09D0:  MULWF  08
09D2:  MOVF   FF3,W
09D4:  ADDWF  07,W
09D6:  MOVWF  x4A
09D8:  MOVLW  00
09DA:  BTFSC  x45.0
09DC:  MOVLW  01
09DE:  MOVWF  x4B
09E0:  MOVFF  449,44C
09E4:  MOVFF  44A,44D
09E8:  MOVFF  08,44E
09EC:  MOVFF  08,44F
09F0:  MOVWF  x50
09F2:  MOVLB  0
09F4:  RCALL  0886
09F6:  MOVLB  4
09F8:  MOVF   x47,W
09FA:  INCF   x47,F
09FC:  BCF    FD8.0
09FE:  RRCF   x48,F
0A00:  BRA    098A
....................     } 
0A02:  INCF   x46,F
0A04:  BRA    0938
....................   } 
....................  
....................   SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
0A06:  MOVF   08,W
0A08:  MULLW  05
0A0A:  MOVF   FF3,W
0A0C:  ADDWF  06,W
0A0E:  MOVWF  x49
0A10:  MOVF   08,W
0A12:  MULLW  07
0A14:  MOVFF  FF3,44A
0A18:  MOVFF  449,44C
0A1C:  MOVFF  07,44D
0A20:  MOVFF  08,44E
0A24:  MOVFF  44A,44F
0A28:  CLRF   x50
0A2A:  MOVLB  0
0A2C:  RCALL  0886
....................    
....................   x_pos += text_size * 6; 
0A2E:  MOVF   08,W
0A30:  MULLW  06
0A32:  MOVF   FF3,W
0A34:  ADDWF  06,F
....................  
....................   if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) ) 
0A36:  MOVF   08,W
0A38:  MULLW  06
0A3A:  MOVF   FF3,W
0A3C:  ADDLW  80
0A3E:  SUBWF  06,W
0A40:  BZ    0A48
0A42:  BNC   0A48
....................     x_pos = SSD1306_LCDWIDTH; 
0A44:  MOVLW  80
0A46:  MOVWF  06
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH) 
0A48:  BTFSS  09.0
0A4A:  BRA    0A70
0A4C:  MOVF   08,W
0A4E:  MULLW  05
0A50:  MOVF   FF3,W
0A52:  ADDWF  06,W
0A54:  SUBLW  80
0A56:  BC    0A70
....................   { 
....................     x_pos = 0; 
0A58:  CLRF   06
....................     y_pos += text_size * 8; 
0A5A:  MOVF   08,W
0A5C:  MULLW  08
0A5E:  MOVF   FF3,W
0A60:  ADDWF  07,F
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
0A62:  MOVF   08,W
0A64:  MULLW  07
0A66:  MOVF   FF3,W
0A68:  ADDWF  07,W
0A6A:  SUBLW  40
0A6C:  BC    0A70
....................       y_pos = 0; 
0A6E:  CLRF   07
0A70:  MOVLB  4
....................   } 
0A72:  MOVLB  0
0A74:  GOTO   0A88 (RETURN)
.................... } 
....................  
.................... // print custom char (dimension: 7x5 pixel) 
.................... void SSD1306_PutCustomC(rom uint8_t *c) 
.................... { 
....................   int1 _color; 
....................   uint8_t i, j, line; 
....................    
....................   for(i = 0; i < 5; i++ ) { 
....................     line = c[i]; 
....................  
....................     for(j = 0; j < 7; j++, line >>= 1) { 
....................       if(line & 0x01) 
....................         _color = TRUE; 
....................       else 
....................         _color = FALSE; 
....................       if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color); 
....................       else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color); 
....................     } 
....................   } 
....................  
....................   SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE); 
....................  
....................   x_pos += (text_size * 6); 
....................  
....................   if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) ) 
....................     x_pos = SSD1306_LCDWIDTH; 
....................  
....................   if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH) 
....................   { 
....................     x_pos = 0; 
....................     y_pos += text_size * 8; 
....................     if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT) 
....................       y_pos = 0; 
....................   } 
.................... } 
....................  
.................... // draw BMP stored in ROM 
.................... void SSD1306_ROMBMP(uint8_t x, uint8_t y, rom uint8_t *bitmap, uint8_t w, uint8_t h) 
.................... { 
....................   for( uint16_t i = 0; i < h/8; i++ ) 
....................   {     
....................     for( uint16_t j = 0; j < (uint16_t)w * 8; j++ ) 
....................     {       
....................       if( bit_test(bitmap[j/8 + i*w], j % 8) == 1 ) 
....................         SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8)); 
....................       else 
....................         SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);   
....................     } 
....................   } 
.................... } 
....................  
.................... // end of driver code. 
....................  
....................  
.................... #byte TRISA = 0xF92 
.................... #byte PORTA = 0xF80 
.................... #byte TRISC = 0xF94 
.................... #byte PORTC = 0xF82 
.................... #byte TRISD = 0xF95 
.................... #byte PORTD = 0xF83 
....................  
.................... //#include <lcd.c> 
....................  
.................... char buffer[20]; 
.................... void main() 
*
1438:  CLRF   FF8
143A:  BCF    FD0.7
143C:  MOVLW  70
143E:  MOVWF  FD3
1440:  MOVF   FD3,W
1442:  BSF    09.0
1444:  MOVLB  4
1446:  CLRF   x1F
1448:  CLRF   x1E
144A:  MOVF   FC1,W
144C:  ANDLW  C0
144E:  IORLW  0F
1450:  MOVWF  FC1
1452:  MOVLW  07
1454:  MOVWF  FB4
1456:  BRA    16C8
1458:  DATA 3F,40
145A:  DATA 0A,00
145C:  DATA 03,80
145E:  DATA 80,80
1460:  DATA 80,0F
1462:  DATA C0,00
1464:  DATA 04,80
1466:  DATA 80,80
1468:  DATA C0,C0
146A:  DATA 3F,C0
146C:  DATA 00,08
146E:  DATA 80,80
1470:  DATA C0,E0
1472:  DATA F0,F8
1474:  DATA FC,F8
1476:  DATA E0,11
1478:  DATA C0,00
147A:  DATA 05,C0
147C:  DATA 80,03
147E:  DATA 80,00
1480:  DATA 80,80
1482:  DATA 04,C0
1484:  DATA 00,05
1486:  DATA C0,80
1488:  DATA 04,80
148A:  DATA 00,FF
148C:  DATA FF,FF
148E:  DATA 04,C0
1490:  DATA 00,04
1492:  DATA C0,80
1494:  DATA 0F,80
1496:  DATA 00,00
1498:  DATA 80,80
149A:  DATA 00,00
149C:  DATA 80,FF
149E:  DATA FF,80
14A0:  DATA 80,00
14A2:  DATA 80,80
14A4:  DATA 00,04
14A6:  DATA C0,80
14A8:  DATA 03,80
14AA:  DATA 00,80
14AC:  DATA 80,05
14AE:  DATA C0,00
14B0:  DATA 0E,80
14B2:  DATA 80,80
14B4:  DATA 00,00
14B6:  DATA 8C,8E
14B8:  DATA 84,00
14BA:  DATA 00,80
14BC:  DATA F8,F8
14BE:  DATA F8,80
14C0:  DATA 0D,C0
14C2:  DATA 00,0C
14C4:  DATA C0,F0
14C6:  DATA 0C,80
14C8:  DATA E0,E0
14CA:  DATA C0,80
14CC:  DATA 00,E0
14CE:  DATA FC,FE
14D0:  DATA FF,FF
14D2:  DATA FF,7F
14D4:  DATA 05,C0
14D6:  DATA FF,0E
14D8:  DATA C0,00
14DA:  DATA 03,80
14DC:  DATA FE,FF
14DE:  DATA C7,04
14E0:  DATA C0,01
14E2:  DATA 08,80
14E4:  DATA 83,FF
14E6:  DATA FF,00
14E8:  DATA 00,7C
14EA:  DATA FE,C7
14EC:  DATA 04,C0
14EE:  DATA 01,35
14F0:  DATA 80,83
14F2:  DATA FF,FF
14F4:  DATA FF,00
14F6:  DATA 38,FE
14F8:  DATA C7,83
14FA:  DATA 01,01
14FC:  DATA 01,83
14FE:  DATA C7,FF
1500:  DATA FF,00
1502:  DATA 00,01
1504:  DATA FF,FF
1506:  DATA 01,01
1508:  DATA 00,FF
150A:  DATA FF,07
150C:  DATA 01,01
150E:  DATA 01,00
1510:  DATA 00,7F
1512:  DATA FF,80
1514:  DATA 00,00
1516:  DATA 00,FF
1518:  DATA FF,7F
151A:  DATA 00,00
151C:  DATA FF,FF
151E:  DATA FF,00
1520:  DATA 00,01
1522:  DATA FF,FF
1524:  DATA FF,01
1526:  DATA 0D,C0
1528:  DATA 00,05
152A:  DATA 80,03
152C:  DATA 0F,3F
152E:  DATA 7F,7F
1530:  DATA 07,C0
1532:  DATA FF,0C
1534:  DATA 80,E7
1536:  DATA C7,C7
1538:  DATA 8F,8F
153A:  DATA 9F,BF
153C:  DATA FF,FF
153E:  DATA C3,C0
1540:  DATA F0,05
1542:  DATA C0,FF
1544:  DATA 08,C0
1546:  DATA FC,08
1548:  DATA 80,F8
154A:  DATA F8,F0
154C:  DATA F0,E0
154E:  DATA C0,00
1550:  DATA 01,05
1552:  DATA C0,03
1554:  DATA 03,80
1556:  DATA 01,03
1558:  DATA 03,04
155A:  DATA C0,00
155C:  DATA 01,80
155E:  DATA 01,04
1560:  DATA C0,03
1562:  DATA 08,80
1564:  DATA 01,01
1566:  DATA 03,01
1568:  DATA 00,00
156A:  DATA 00,01
156C:  DATA 04,C0
156E:  DATA 03,0E
1570:  DATA 80,01
1572:  DATA 01,03
1574:  DATA 03,00
1576:  DATA 00,00
1578:  DATA 03,03
157A:  DATA 00,00
157C:  DATA 00,03
157E:  DATA 03,07
1580:  DATA C0,00
1582:  DATA 01,80
1584:  DATA 01,05
1586:  DATA C0,03
1588:  DATA 0D,80
158A:  DATA 01,00
158C:  DATA 00,00
158E:  DATA 01,03
1590:  DATA 01,00
1592:  DATA 00,00
1594:  DATA 03,03
1596:  DATA 01,11
1598:  DATA C0,00
159A:  DATA 05,80
159C:  DATA 80,C0
159E:  DATA E0,F0
15A0:  DATA F9,05
15A2:  DATA C0,FF
15A4:  DATA 0C,80
15A6:  DATA 3F,1F
15A8:  DATA 0F,87
15AA:  DATA C7,F7
15AC:  DATA FF,FF
15AE:  DATA 1F,1F
15B0:  DATA 3D,FC
15B2:  DATA 04,C0
15B4:  DATA F8,02
15B6:  DATA 80,7C
15B8:  DATA 7D,08
15BA:  DATA C0,FF
15BC:  DATA 07,80
15BE:  DATA 7F,3F
15C0:  DATA 0F,07
15C2:  DATA 00,30
15C4:  DATA 30,16
15C6:  DATA C0,00
15C8:  DATA 03,80
15CA:  DATA FE,FE
15CC:  DATA FC,16
15CE:  DATA C0,00
15D0:  DATA 02,80
15D2:  DATA E0,C0
15D4:  DATA 0B,C0
15D6:  DATA 00,02
15D8:  DATA 80,30
15DA:  DATA 30,15
15DC:  DATA C0,00
15DE:  DATA 02,80
15E0:  DATA C0,FE
15E2:  DATA 09,C0
15E4:  DATA FF,0C
15E6:  DATA 80,7F
15E8:  DATA 7F,3F
15EA:  DATA 1F,0F
15EC:  DATA 07,1F
15EE:  DATA 7F,FF
15F0:  DATA FF,F8
15F2:  DATA F8,05
15F4:  DATA C0,FF
15F6:  DATA 07,80
15F8:  DATA FE,F8
15FA:  DATA E0,00
15FC:  DATA 00,00
15FE:  DATA 01,08
1600:  DATA C0,00
1602:  DATA 1F,80
1604:  DATA FE,FE
1606:  DATA 00,00
1608:  DATA 00,FC
160A:  DATA FE,FC
160C:  DATA 0C,06
160E:  DATA 06,0E
1610:  DATA FC,F8
1612:  DATA 00,00
1614:  DATA F0,F8
1616:  DATA 1C,0E
1618:  DATA 06,06
161A:  DATA 06,0C
161C:  DATA FF,FF
161E:  DATA FF,00
1620:  DATA 00,FE
1622:  DATA FE,04
1624:  DATA C0,00
1626:  DATA 31,80
1628:  DATA FC,FE
162A:  DATA FC,00
162C:  DATA 18,3C
162E:  DATA 7E,66
1630:  DATA E6,CE
1632:  DATA 84,00
1634:  DATA 00,06
1636:  DATA FF,FF
1638:  DATA 06,06
163A:  DATA FC,FE
163C:  DATA FC,0C
163E:  DATA 06,06
1640:  DATA 06,00
1642:  DATA 00,FE
1644:  DATA FE,00
1646:  DATA 00,C0
1648:  DATA F8,FC
164A:  DATA 4E,46
164C:  DATA 46,46
164E:  DATA 4E,7C
1650:  DATA 78,40
1652:  DATA 18,3C
1654:  DATA 76,E6
1656:  DATA CE,CC
1658:  DATA 80,14
165A:  DATA C0,00
165C:  DATA 05,80
165E:  DATA 01,07
1660:  DATA 0F,1F
1662:  DATA 1F,04
1664:  DATA C0,3F
1666:  DATA 03,80
1668:  DATA 1F,0F
166A:  DATA 03,0C
166C:  DATA C0,00
166E:  DATA 08,80
1670:  DATA 0F,0F
1672:  DATA 00,00
1674:  DATA 00,0F
1676:  DATA 0F,0F
1678:  DATA 04,C0
167A:  DATA 00,2C
167C:  DATA 80,0F
167E:  DATA 0F,00
1680:  DATA 00,03
1682:  DATA 07,0E
1684:  DATA 0C,18
1686:  DATA 18,0C
1688:  DATA 06,0F
168A:  DATA 0F,0F
168C:  DATA 00,00
168E:  DATA 01,0F
1690:  DATA 0E,0C
1692:  DATA 18,0C
1694:  DATA 0F,07
1696:  DATA 01,00
1698:  DATA 04,0E
169A:  DATA 0C,18
169C:  DATA 0C,0F
169E:  DATA 07,00
16A0:  DATA 00,00
16A2:  DATA 0F,0F
16A4:  DATA 00,00
16A6:  DATA 0F,0F
16A8:  DATA 0F,06
16AA:  DATA C0,00
16AC:  DATA 16,80
16AE:  DATA 0F,0F
16B0:  DATA 00,00
16B2:  DATA 00,07
16B4:  DATA 07,0C
16B6:  DATA 0C,18
16B8:  DATA 1C,0C
16BA:  DATA 06,06
16BC:  DATA 00,04
16BE:  DATA 0E,0C
16C0:  DATA 18,0C
16C2:  DATA 0F,07
16C4:  DATA 80,C0
16C6:  DATA 00,00
16C8:  MOVLW  00
16CA:  MOVWF  FF8
16CC:  MOVLW  14
16CE:  MOVWF  FF7
16D0:  MOVLW  58
16D2:  MOVWF  FF6
16D4:  TBLRD*+
16D6:  MOVF   FF5,W
16D8:  MOVWF  00
16DA:  XORLW  00
16DC:  BZ    1704
16DE:  TBLRD*+
16E0:  MOVF   FF5,W
16E2:  MOVWF  01
16E4:  BTFSC  FE8.7
16E6:  BRA    16F2
16E8:  ANDLW  0F
16EA:  MOVWF  FEA
16EC:  TBLRD*+
16EE:  MOVFF  FF5,FE9
16F2:  BTFSC  01.6
16F4:  TBLRD*+
16F6:  BTFSS  01.6
16F8:  TBLRD*+
16FA:  MOVFF  FF5,FEE
16FE:  DCFSNZ 00,F
1700:  BRA    16D4
1702:  BRA    16F6
1704:  CLRF   FF8
.................... { 
....................    TRISA = 0xFF; 
1706:  SETF   F92
....................    TRISC = 0x00; 
1708:  CLRF   F94
....................    TRISD = 0x00; 
170A:  CLRF   F95
....................    PORTC = 0x00; 
170C:  CLRF   F82
....................    PORTD = 0x00; 
170E:  CLRF   F83
....................    //lcd_init(); 
....................     
....................    setup_adc_ports(AN0); 
1710:  MOVF   FC1,W
1712:  ANDLW  C0
1714:  IORLW  0E
1716:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_8); 
1718:  MOVF   FC0,W
171A:  ANDLW  C0
171C:  IORLW  01
171E:  MOVWF  FC0
1720:  BSF    FC0.7
1722:  BSF    FC2.0
....................    set_adc_channel(0); 
1724:  MOVLW  00
1726:  MOVWF  01
1728:  MOVF   FC2,W
172A:  ANDLW  C3
172C:  IORWF  01,W
172E:  MOVWF  FC2
....................    delay_us(20); 
1730:  MOVLW  0C
1732:  MOVWF  00
1734:  DECFSZ 00,F
1736:  BRA    1734
1738:  BRA    173A
173A:  NOP   
....................     
....................    int16 valor_digital = 0; 
....................    float valor_tension = 0; 
....................    float  porcentaje = 0; 
....................    double temperatura = 0; 
173C:  CLRF   x21
173E:  CLRF   x20
1740:  CLRF   x25
1742:  CLRF   x24
1744:  CLRF   x23
1746:  CLRF   x22
1748:  CLRF   x29
174A:  CLRF   x28
174C:  CLRF   x27
174E:  CLRF   x26
1750:  CLRF   x2D
1752:  CLRF   x2C
1754:  CLRF   x2B
1756:  CLRF   x2A
....................     
....................    SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
1758:  MOVLW  02
175A:  MOVWF  x3C
175C:  MOVLW  78
175E:  MOVWF  x3D
1760:  MOVLB  0
1762:  GOTO   0310
....................    SSD1306_ClearDisplay(); 
1766:  GOTO   045E
....................    SSD1306_Display(); 
176A:  CALL   0486
....................     
....................    SSD1306_DrawText(30, 1, "Control PWM", 1); 
176E:  MOVLW  04
1770:  MOVWF  FEA
1772:  MOVLW  2E
1774:  MOVWF  FE9
1776:  MOVFF  FF2,43C
177A:  BCF    FF2.7
177C:  MOVLW  0C
177E:  MOVWF  01
1780:  CLRF   FF7
1782:  MOVLW  00
1784:  CALL   0200
1788:  TBLRD*-
178A:  TBLRD*+
178C:  MOVFF  FF5,FEE
1790:  DECFSZ 01,F
1792:  BRA    178A
1794:  MOVLB  4
1796:  BTFSC  x3C.7
1798:  BSF    FF2.7
179A:  MOVLW  1E
179C:  MOVWF  x3E
179E:  MOVLW  01
17A0:  MOVWF  x3F
17A2:  MOVLW  04
17A4:  MOVWF  x41
17A6:  MOVLW  2E
17A8:  MOVWF  x40
17AA:  MOVLW  01
17AC:  MOVWF  x42
17AE:  MOVLB  0
17B0:  CALL   0A78
....................    SSD1306_DrawRect(10, 12, 108, 52); 
17B4:  MOVLW  0A
17B6:  MOVLB  4
17B8:  MOVWF  x3C
17BA:  MOVLW  0C
17BC:  MOVWF  x3D
17BE:  MOVLW  6C
17C0:  MOVWF  x3E
17C2:  MOVLW  34
17C4:  MOVWF  x3F
17C6:  MOVLB  0
17C8:  GOTO   0AEC
....................     
....................    SSD1306_DrawText(15, 20, "ADC: ", 1); 
17CC:  MOVLW  41
17CE:  MOVLB  4
17D0:  MOVWF  x2E
17D2:  MOVLW  44
17D4:  MOVWF  x2F
17D6:  MOVLW  43
17D8:  MOVWF  x30
17DA:  MOVLW  3A
17DC:  MOVWF  x31
17DE:  MOVLW  20
17E0:  MOVWF  x32
17E2:  CLRF   x33
17E4:  MOVLW  0F
17E6:  MOVWF  x3E
17E8:  MOVLW  14
17EA:  MOVWF  x3F
17EC:  MOVLW  04
17EE:  MOVWF  x41
17F0:  MOVLW  2E
17F2:  MOVWF  x40
17F4:  MOVLW  01
17F6:  MOVWF  x42
17F8:  MOVLB  0
17FA:  CALL   0A78
....................    SSD1306_DrawText(15, 35, "Temperatura: ", 1); 
17FE:  MOVLW  04
1800:  MOVWF  FEA
1802:  MOVLW  2E
1804:  MOVWF  FE9
1806:  MOVFF  FF2,43C
180A:  BCF    FF2.7
180C:  MOVLW  0E
180E:  MOVWF  01
1810:  CLRF   FF7
1812:  MOVLW  00
1814:  CALL   021C
1818:  TBLRD*-
181A:  TBLRD*+
181C:  MOVFF  FF5,FEE
1820:  DECFSZ 01,F
1822:  BRA    181A
1824:  MOVLB  4
1826:  BTFSC  x3C.7
1828:  BSF    FF2.7
182A:  MOVLW  0F
182C:  MOVWF  x3E
182E:  MOVLW  23
1830:  MOVWF  x3F
1832:  MOVLW  04
1834:  MOVWF  x41
1836:  MOVLW  2E
1838:  MOVWF  x40
183A:  MOVLW  01
183C:  MOVWF  x42
183E:  MOVLB  0
1840:  CALL   0A78
....................    SSD1306_DrawText(15, 50, "Prcentaje:", 1); 
1844:  MOVLW  04
1846:  MOVWF  FEA
1848:  MOVLW  2E
184A:  MOVWF  FE9
184C:  MOVFF  FF2,43C
1850:  BCF    FF2.7
1852:  MOVLW  0B
1854:  MOVWF  01
1856:  CLRF   FF7
1858:  MOVLW  00
185A:  CALL   023A
185E:  TBLRD*-
1860:  TBLRD*+
1862:  MOVFF  FF5,FEE
1866:  DECFSZ 01,F
1868:  BRA    1860
186A:  MOVLB  4
186C:  BTFSC  x3C.7
186E:  BSF    FF2.7
1870:  MOVLW  0F
1872:  MOVWF  x3E
1874:  MOVLW  32
1876:  MOVWF  x3F
1878:  MOVLW  04
187A:  MOVWF  x41
187C:  MOVLW  2E
187E:  MOVWF  x40
1880:  MOVLW  01
1882:  MOVWF  x42
1884:  MOVLB  0
1886:  CALL   0A78
....................    SSD1306_Display(); 
188A:  CALL   0486
....................     
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(0); 
188E:  MOVLW  00
1890:  MOVWF  01
1892:  MOVF   FC2,W
1894:  ANDLW  C3
1896:  IORWF  01,W
1898:  MOVWF  FC2
....................       delay_us(20); 
189A:  MOVLW  0C
189C:  MOVWF  00
189E:  DECFSZ 00,F
18A0:  BRA    189E
18A2:  BRA    18A4
18A4:  NOP   
....................       valor_digital = read_adc(); 
18A6:  BSF    FC2.1
18A8:  BTFSC  FC2.1
18AA:  BRA    18A8
18AC:  MOVFF  FC4,421
18B0:  MOVLB  4
18B2:  MOVFF  FC3,420
....................       delay_us(20); 
18B6:  MOVLW  0C
18B8:  MOVWF  00
18BA:  DECFSZ 00,F
18BC:  BRA    18BA
18BE:  BRA    18C0
18C0:  NOP   
....................       valor_tension = 5.0*(valor_digital/1023.0); 
18C2:  MOVFF  421,43D
18C6:  MOVFF  420,43C
18CA:  MOVLB  0
18CC:  CALL   0B54
18D0:  MOVFF  03,443
18D4:  MOVFF  02,442
18D8:  MOVFF  01,441
18DC:  MOVFF  00,440
18E0:  MOVLB  4
18E2:  CLRF   x47
18E4:  MOVLW  C0
18E6:  MOVWF  x46
18E8:  MOVLW  7F
18EA:  MOVWF  x45
18EC:  MOVLW  88
18EE:  MOVWF  x44
18F0:  MOVLB  0
18F2:  CALL   0B8A
18F6:  MOVLB  4
18F8:  CLRF   x4C
18FA:  CLRF   x4B
18FC:  MOVLW  20
18FE:  MOVWF  x4A
1900:  MOVLW  81
1902:  MOVWF  x49
1904:  MOVFF  03,450
1908:  MOVFF  02,44F
190C:  MOVFF  01,44E
1910:  MOVFF  00,44D
1914:  MOVLB  0
1916:  CALL   0CE8
191A:  MOVFF  03,425
191E:  MOVFF  02,424
1922:  MOVFF  01,423
1926:  MOVFF  00,422
....................       temperatura = valor_tension*100; 
192A:  MOVFF  425,44C
192E:  MOVFF  424,44B
1932:  MOVFF  423,44A
1936:  MOVFF  422,449
193A:  MOVLB  4
193C:  CLRF   x50
193E:  CLRF   x4F
1940:  MOVLW  48
1942:  MOVWF  x4E
1944:  MOVLW  85
1946:  MOVWF  x4D
1948:  MOVLB  0
194A:  CALL   0CE8
194E:  MOVFF  03,42D
1952:  MOVFF  02,42C
1956:  MOVFF  01,42B
195A:  MOVFF  00,42A
....................        
....................       sprintf(buffer, "%Lu", valor_digital); 
195E:  MOVLW  04
1960:  MOVLB  4
1962:  MOVWF  x1F
1964:  MOVLW  0A
1966:  MOVWF  x1E
1968:  MOVLW  10
196A:  MOVWF  FE9
196C:  MOVFF  421,43D
1970:  MOVFF  420,43C
1974:  MOVLB  0
1976:  GOTO   0DFE
....................       SSD1306_DrawText(40, 20, buffer, 1); 
197A:  MOVLW  28
197C:  MOVLB  4
197E:  MOVWF  x3E
1980:  MOVLW  14
1982:  MOVWF  x3F
1984:  MOVLW  04
1986:  MOVWF  x41
1988:  MOVLW  0A
198A:  MOVWF  x40
198C:  MOVLW  01
198E:  MOVWF  x42
1990:  MOVLB  0
1992:  CALL   0A78
....................       sprintf(buffer, "%.1f", temperatura); 
1996:  MOVLW  04
1998:  MOVLB  4
199A:  MOVWF  x1F
199C:  MOVLW  0A
199E:  MOVWF  x1E
19A0:  MOVLW  89
19A2:  MOVWF  FE9
19A4:  MOVFF  42D,43F
19A8:  MOVFF  42C,43E
19AC:  MOVFF  42B,43D
19B0:  MOVFF  42A,43C
19B4:  MOVLW  01
19B6:  MOVWF  x40
19B8:  MOVLB  0
19BA:  CALL   0F9E
....................       SSD1306_DrawText(70, 35, buffer, 1); 
19BE:  MOVLW  46
19C0:  MOVLB  4
19C2:  MOVWF  x3E
19C4:  MOVLW  23
19C6:  MOVWF  x3F
19C8:  MOVLW  04
19CA:  MOVWF  x41
19CC:  MOVLW  0A
19CE:  MOVWF  x40
19D0:  MOVLW  01
19D2:  MOVWF  x42
19D4:  MOVLB  0
19D6:  CALL   0A78
....................        
....................        
....................       set_adc_channel(1); 
19DA:  MOVLW  04
19DC:  MOVWF  01
19DE:  MOVF   FC2,W
19E0:  ANDLW  C3
19E2:  IORWF  01,W
19E4:  MOVWF  FC2
....................       delay_us(20); 
19E6:  MOVLW  0C
19E8:  MOVWF  00
19EA:  DECFSZ 00,F
19EC:  BRA    19EA
19EE:  BRA    19F0
19F0:  NOP   
....................       valor_digital = read_adc(); 
19F2:  BSF    FC2.1
19F4:  BTFSC  FC2.1
19F6:  BRA    19F4
19F8:  MOVFF  FC4,421
19FC:  MOVLB  4
19FE:  MOVFF  FC3,420
....................       delay_us(20); 
1A02:  MOVLW  0C
1A04:  MOVWF  00
1A06:  DECFSZ 00,F
1A08:  BRA    1A06
1A0A:  BRA    1A0C
1A0C:  NOP   
....................       porcentaje = ((1023.0 - valor_digital) / 1023.0 )* 100.0; 
1A0E:  MOVFF  421,43D
1A12:  MOVFF  420,43C
1A16:  MOVLB  0
1A18:  CALL   0B54
1A1C:  BSF    FD8.1
1A1E:  MOVLB  4
1A20:  CLRF   x3F
1A22:  MOVLW  C0
1A24:  MOVWF  x3E
1A26:  MOVLW  7F
1A28:  MOVWF  x3D
1A2A:  MOVLW  88
1A2C:  MOVWF  x3C
1A2E:  MOVFF  03,443
1A32:  MOVFF  02,442
1A36:  MOVFF  01,441
1A3A:  MOVFF  00,440
1A3E:  MOVLB  0
1A40:  GOTO   1144
1A44:  MOVFF  03,43F
1A48:  MOVFF  02,43E
1A4C:  MOVFF  01,43D
1A50:  MOVFF  00,43C
1A54:  MOVFF  03,443
1A58:  MOVFF  02,442
1A5C:  MOVFF  01,441
1A60:  MOVFF  00,440
1A64:  MOVLB  4
1A66:  CLRF   x47
1A68:  MOVLW  C0
1A6A:  MOVWF  x46
1A6C:  MOVLW  7F
1A6E:  MOVWF  x45
1A70:  MOVLW  88
1A72:  MOVWF  x44
1A74:  MOVLB  0
1A76:  CALL   0B8A
1A7A:  MOVFF  03,43F
1A7E:  MOVFF  02,43E
1A82:  MOVFF  01,43D
1A86:  MOVFF  00,43C
1A8A:  MOVFF  03,44C
1A8E:  MOVFF  02,44B
1A92:  MOVFF  01,44A
1A96:  MOVFF  00,449
1A9A:  MOVLB  4
1A9C:  CLRF   x50
1A9E:  CLRF   x4F
1AA0:  MOVLW  48
1AA2:  MOVWF  x4E
1AA4:  MOVLW  85
1AA6:  MOVWF  x4D
1AA8:  MOVLB  0
1AAA:  CALL   0CE8
1AAE:  MOVFF  03,429
1AB2:  MOVFF  02,428
1AB6:  MOVFF  01,427
1ABA:  MOVFF  00,426
....................       sprintf(buffer, "%.1f", porcentaje); 
1ABE:  MOVLW  04
1AC0:  MOVLB  4
1AC2:  MOVWF  x1F
1AC4:  MOVLW  0A
1AC6:  MOVWF  x1E
1AC8:  MOVLW  89
1ACA:  MOVWF  FE9
1ACC:  MOVFF  429,43F
1AD0:  MOVFF  428,43E
1AD4:  MOVFF  427,43D
1AD8:  MOVFF  426,43C
1ADC:  MOVLW  01
1ADE:  MOVWF  x40
1AE0:  MOVLB  0
1AE2:  CALL   0F9E
....................       SSD1306_DrawText(90, 50, buffer, 1); 
1AE6:  MOVLW  5A
1AE8:  MOVLB  4
1AEA:  MOVWF  x3E
1AEC:  MOVLW  32
1AEE:  MOVWF  x3F
1AF0:  MOVLW  04
1AF2:  MOVWF  x41
1AF4:  MOVLW  0A
1AF6:  MOVWF  x40
1AF8:  MOVLW  01
1AFA:  MOVWF  x42
1AFC:  MOVLB  0
1AFE:  CALL   0A78
....................       SSD1306_Display(); 
1B02:  CALL   0486
....................       delay_ms(100); 
1B06:  MOVLW  64
1B08:  MOVLB  4
1B0A:  MOVWF  x3E
1B0C:  MOVLB  0
1B0E:  CALL   0256
....................       if (porcentaje < (100/8) * 2 && porcentaje >= (100/8) * 1) 
1B12:  MOVFF  429,43F
1B16:  MOVFF  428,43E
1B1A:  MOVFF  427,43D
1B1E:  MOVFF  426,43C
1B22:  MOVLB  4
1B24:  CLRF   x43
1B26:  CLRF   x42
1B28:  MOVLW  40
1B2A:  MOVWF  x41
1B2C:  MOVLW  83
1B2E:  MOVWF  x40
1B30:  MOVLB  0
1B32:  RCALL  13BE
1B34:  BNC   1B62
1B36:  MOVLB  4
1B38:  CLRF   x3F
1B3A:  CLRF   x3E
1B3C:  MOVLW  40
1B3E:  MOVWF  x3D
1B40:  MOVLW  82
1B42:  MOVWF  x3C
1B44:  MOVFF  429,443
1B48:  MOVFF  428,442
1B4C:  MOVFF  427,441
1B50:  MOVFF  426,440
1B54:  MOVLB  0
1B56:  RCALL  13BE
1B58:  BC    1B5C
1B5A:  BNZ   1B62
....................       { 
....................          PORTD = 0x01; 
1B5C:  MOVLW  01
1B5E:  MOVWF  F83
....................       }else if(porcentaje < (100/8) * 3 && porcentaje >= (100/8) * 2) 
1B60:  BRA    1D82
1B62:  MOVFF  429,43F
1B66:  MOVFF  428,43E
1B6A:  MOVFF  427,43D
1B6E:  MOVFF  426,43C
1B72:  MOVLB  4
1B74:  CLRF   x43
1B76:  CLRF   x42
1B78:  MOVLW  10
1B7A:  MOVWF  x41
1B7C:  MOVLW  84
1B7E:  MOVWF  x40
1B80:  MOVLB  0
1B82:  RCALL  13BE
1B84:  BNC   1BB2
1B86:  MOVLB  4
1B88:  CLRF   x3F
1B8A:  CLRF   x3E
1B8C:  MOVLW  40
1B8E:  MOVWF  x3D
1B90:  MOVLW  83
1B92:  MOVWF  x3C
1B94:  MOVFF  429,443
1B98:  MOVFF  428,442
1B9C:  MOVFF  427,441
1BA0:  MOVFF  426,440
1BA4:  MOVLB  0
1BA6:  RCALL  13BE
1BA8:  BC    1BAC
1BAA:  BNZ   1BB2
....................       { 
....................          PORTD = 0x03; 
1BAC:  MOVLW  03
1BAE:  MOVWF  F83
....................       }else if (porcentaje < (100/8) * 4 && porcentaje >= (100/8) * 3) 
1BB0:  BRA    1D82
1BB2:  MOVFF  429,43F
1BB6:  MOVFF  428,43E
1BBA:  MOVFF  427,43D
1BBE:  MOVFF  426,43C
1BC2:  MOVLB  4
1BC4:  CLRF   x43
1BC6:  CLRF   x42
1BC8:  MOVLW  40
1BCA:  MOVWF  x41
1BCC:  MOVLW  84
1BCE:  MOVWF  x40
1BD0:  MOVLB  0
1BD2:  CALL   13BE
1BD6:  BNC   1C06
1BD8:  MOVLB  4
1BDA:  CLRF   x3F
1BDC:  CLRF   x3E
1BDE:  MOVLW  10
1BE0:  MOVWF  x3D
1BE2:  MOVLW  84
1BE4:  MOVWF  x3C
1BE6:  MOVFF  429,443
1BEA:  MOVFF  428,442
1BEE:  MOVFF  427,441
1BF2:  MOVFF  426,440
1BF6:  MOVLB  0
1BF8:  CALL   13BE
1BFC:  BC    1C00
1BFE:  BNZ   1C06
....................       { 
....................          PORTD = 0x07; 
1C00:  MOVLW  07
1C02:  MOVWF  F83
....................       }else if (porcentaje < (100/8) * 5 && porcentaje >= (100/8) * 4) 
1C04:  BRA    1D82
1C06:  MOVFF  429,43F
1C0A:  MOVFF  428,43E
1C0E:  MOVFF  427,43D
1C12:  MOVFF  426,43C
1C16:  MOVLB  4
1C18:  CLRF   x43
1C1A:  CLRF   x42
1C1C:  MOVLW  70
1C1E:  MOVWF  x41
1C20:  MOVLW  84
1C22:  MOVWF  x40
1C24:  MOVLB  0
1C26:  CALL   13BE
1C2A:  BNC   1C5A
1C2C:  MOVLB  4
1C2E:  CLRF   x3F
1C30:  CLRF   x3E
1C32:  MOVLW  40
1C34:  MOVWF  x3D
1C36:  MOVLW  84
1C38:  MOVWF  x3C
1C3A:  MOVFF  429,443
1C3E:  MOVFF  428,442
1C42:  MOVFF  427,441
1C46:  MOVFF  426,440
1C4A:  MOVLB  0
1C4C:  CALL   13BE
1C50:  BC    1C54
1C52:  BNZ   1C5A
....................       { 
....................          PORTD = 0x0F; 
1C54:  MOVLW  0F
1C56:  MOVWF  F83
....................       }else if (porcentaje < (100/8) * 6 && porcentaje >= (100/8) * 5) 
1C58:  BRA    1D82
1C5A:  MOVFF  429,43F
1C5E:  MOVFF  428,43E
1C62:  MOVFF  427,43D
1C66:  MOVFF  426,43C
1C6A:  MOVLB  4
1C6C:  CLRF   x43
1C6E:  CLRF   x42
1C70:  MOVLW  10
1C72:  MOVWF  x41
1C74:  MOVLW  85
1C76:  MOVWF  x40
1C78:  MOVLB  0
1C7A:  CALL   13BE
1C7E:  BNC   1CAE
1C80:  MOVLB  4
1C82:  CLRF   x3F
1C84:  CLRF   x3E
1C86:  MOVLW  70
1C88:  MOVWF  x3D
1C8A:  MOVLW  84
1C8C:  MOVWF  x3C
1C8E:  MOVFF  429,443
1C92:  MOVFF  428,442
1C96:  MOVFF  427,441
1C9A:  MOVFF  426,440
1C9E:  MOVLB  0
1CA0:  CALL   13BE
1CA4:  BC    1CA8
1CA6:  BNZ   1CAE
....................       { 
....................          PORTD = 0x1F; 
1CA8:  MOVLW  1F
1CAA:  MOVWF  F83
....................       }else if (porcentaje < (100/8) * 7 && porcentaje >= (100/8) * 6) 
1CAC:  BRA    1D82
1CAE:  MOVFF  429,43F
1CB2:  MOVFF  428,43E
1CB6:  MOVFF  427,43D
1CBA:  MOVFF  426,43C
1CBE:  MOVLB  4
1CC0:  CLRF   x43
1CC2:  CLRF   x42
1CC4:  MOVLW  28
1CC6:  MOVWF  x41
1CC8:  MOVLW  85
1CCA:  MOVWF  x40
1CCC:  MOVLB  0
1CCE:  CALL   13BE
1CD2:  BNC   1D02
1CD4:  MOVLB  4
1CD6:  CLRF   x3F
1CD8:  CLRF   x3E
1CDA:  MOVLW  10
1CDC:  MOVWF  x3D
1CDE:  MOVLW  85
1CE0:  MOVWF  x3C
1CE2:  MOVFF  429,443
1CE6:  MOVFF  428,442
1CEA:  MOVFF  427,441
1CEE:  MOVFF  426,440
1CF2:  MOVLB  0
1CF4:  CALL   13BE
1CF8:  BC    1CFC
1CFA:  BNZ   1D02
....................       { 
....................          PORTD = 0x3F; 
1CFC:  MOVLW  3F
1CFE:  MOVWF  F83
....................       }else if (porcentaje < 100 && porcentaje >= (100/8) * 7) 
1D00:  BRA    1D82
1D02:  MOVFF  429,43F
1D06:  MOVFF  428,43E
1D0A:  MOVFF  427,43D
1D0E:  MOVFF  426,43C
1D12:  MOVLB  4
1D14:  CLRF   x43
1D16:  CLRF   x42
1D18:  MOVLW  48
1D1A:  MOVWF  x41
1D1C:  MOVLW  85
1D1E:  MOVWF  x40
1D20:  MOVLB  0
1D22:  CALL   13BE
1D26:  BNC   1D56
1D28:  MOVLB  4
1D2A:  CLRF   x3F
1D2C:  CLRF   x3E
1D2E:  MOVLW  28
1D30:  MOVWF  x3D
1D32:  MOVLW  85
1D34:  MOVWF  x3C
1D36:  MOVFF  429,443
1D3A:  MOVFF  428,442
1D3E:  MOVFF  427,441
1D42:  MOVFF  426,440
1D46:  MOVLB  0
1D48:  CALL   13BE
1D4C:  BC    1D50
1D4E:  BNZ   1D56
....................       { 
....................          PORTD = 0x7F; 
1D50:  MOVLW  7F
1D52:  MOVWF  F83
....................       }else if (porcentaje == 100) 
1D54:  BRA    1D82
1D56:  MOVFF  429,43F
1D5A:  MOVFF  428,43E
1D5E:  MOVFF  427,43D
1D62:  MOVFF  426,43C
1D66:  MOVLB  4
1D68:  CLRF   x43
1D6A:  CLRF   x42
1D6C:  MOVLW  48
1D6E:  MOVWF  x41
1D70:  MOVLW  85
1D72:  MOVWF  x40
1D74:  MOVLB  0
1D76:  CALL   13BE
1D7A:  BNZ   1D80
....................       { 
....................          PORTD = 0xFF; 
1D7C:  SETF   F83
....................       }else 
1D7E:  BRA    1D82
....................       { 
....................          PORTD = 0x00; 
1D80:  CLRF   F83
....................       } 
....................        
....................       if(temperatura > porcentaje) 
1D82:  MOVFF  429,43F
1D86:  MOVFF  428,43E
1D8A:  MOVFF  427,43D
1D8E:  MOVFF  426,43C
1D92:  MOVFF  42D,443
1D96:  MOVFF  42C,442
1D9A:  MOVFF  42B,441
1D9E:  MOVFF  42A,440
1DA2:  CALL   13BE
1DA6:  BNC   1DAE
....................       { 
....................          PORTC = 0x10; 
1DA8:  MOVLW  10
1DAA:  MOVWF  F82
....................       }else 
1DAC:  BRA    1DB0
....................       { 
....................          PORTC = 0x00; 
1DAE:  CLRF   F82
....................       } 
1DB0:  BRA    188E
....................        
....................    } 
.................... } 
.................... /*//#include <main.h> 
1DB2:  SLEEP 
.................... #include<18F4550.h> 
.................... #device ADC = 10 
.................... #device PASS_STRINGS = IN_RAM 
.................... //#fuses HS, NOWDT, NOPROTECT, NOLVP,PUT,CPUDIV1, VREGEN, NOPBADEN 
.................... #fuses xt, nowdt 
.................... #use I2C(MASTER, SDA=PIN_B0, SCL=PIN_B1, FAST=400000, STREAM=SSD1306_STREAM) 
.................... #use delay(internal=8M) 
....................  
.................... #define SSD1306_I2C_ADDRESS 0x78 
.................... #include"lib/SSD1306_OLED.c"  
....................  
.................... #byte TRISA=0xF92 
.................... #byte PORTA=0xF80 
....................  
.................... char buffer[16]; 
....................  
.................... void main() 
.................... { 
....................    TRISA = 0xFF; 
....................    //setup_ccp1(CCP_PWM); 
....................    setup_adc_ports(AN0); 
....................    //setup_adc_ports(AN0_TO_AN1_ANALOG); 
....................    setup_adc(ADC_CLOCK_DIV_8); 
....................    set_adc_channel(0); 
....................    //set_pwm1_duty(read_adc()); 
....................    delay_us(40); 
....................     
....................    SSD1306_Begin(SSD1306_SWITCHCAPVCC, SSD1306_I2C_ADDRESS); 
....................    SSD1306_ClearDisplay(); 
....................    SSD1306_Display(); 
....................     
....................    int16 valor_digital = 0; 
....................    float valor_tension = 0; 
....................     
....................    SSD1306_DrawText(30, 1, "Control PWM", 1); 
....................    SSD1306_DrawRect(10, 12, 108, 52); 
....................    SSD1306_Display(); 
....................     
....................    while(TRUE) 
....................    { 
....................        
....................        
.................... //!      float valor_adc = read_adc(); 
....................        
.................... //!      temperatura = voltaje * 100; 
....................  
....................   
....................       //set_pwm1_duty(valor_pwm); 
....................      // set_adc_channel(0); 
....................       delay_us(60); 
....................       
....................       valor_digital = read_adc(); 
....................       delay_ms(200); 
....................       //SSD1306_ClearDisplay(); 
....................       valor_tension = 5.0 * (valor_digital / 1023.0); 
....................       //sprintf(buffer, "T = %.2f", (valor_pwm * 500.0 / 1023.0)); 
....................       sprintf(buffer, "ADC %ld", valor_digital ); 
....................       SSD1306_DrawText(12, 15, buffer, 2); 
....................       sprintf(buffer, "V = %01.3f", valor_tension ); 
....................       SSD1306_DrawText(12, 40, buffer, 2); 
....................       SSD1306_Display(); 
....................       delay_ms(1200); 
.................... //!      set_adc_channel(1); 
.................... //!      delay_us(200); 
.................... //!      valor_pwm = read_adc(); 
.................... //!      delay_ms(200); 
.................... //!      //voltaje =  valor_pwm / 1023.0 * 5.0; 
.................... //!      voltaje =  100 / 1023.0 * valor_pwm; 
.................... //!      sprintf(buffer, "V = %.2f", voltaje); 
.................... //!      SSD1306_DrawText(12, 40, buffer, 2); 
.................... //!      SSD1306_Display(); 
.................... //!      delay_ms(400); 
....................    } 
....................  
.................... }*/ 

Configuration Fuses:
   Word  1: C83F   PLL12 CPUDIV4 USBDIV INTRC_IO FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
